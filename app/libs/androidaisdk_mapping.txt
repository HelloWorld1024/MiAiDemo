com.xiaomi.ai.AsrListener -> com.xiaomi.ai.AsrListener:
    void onReadyForSpeech() -> onReadyForSpeech
    void onBeginningOfSpeech() -> onBeginningOfSpeech
    void onRmsChanged(float) -> onRmsChanged
    void onBufferReceived(byte[]) -> onBufferReceived
    void onEndOfSpeech() -> onEndOfSpeech
    void onError(com.xiaomi.ai.SpeechError) -> onError
    void onResults(com.xiaomi.ai.SpeechResult) -> onResults
    void onPartialResults(com.xiaomi.ai.SpeechResult) -> onPartialResults
    void onEvent() -> onEvent
com.xiaomi.ai.AsrListener$SimpleAsrListener -> com.xiaomi.ai.AsrListener$SimpleAsrListener:
    void <init>() -> <init>
    void onReadyForSpeech() -> onReadyForSpeech
    void onBeginningOfSpeech() -> onBeginningOfSpeech
    void onRmsChanged(float) -> onRmsChanged
    void onBufferReceived(byte[]) -> onBufferReceived
    void onEndOfSpeech() -> onEndOfSpeech
    void onError(com.xiaomi.ai.SpeechError) -> onError
    void onResults(com.xiaomi.ai.SpeechResult) -> onResults
    void onPartialResults(com.xiaomi.ai.SpeechResult) -> onPartialResults
    void onEvent() -> onEvent
com.xiaomi.ai.AsrRequest -> com.xiaomi.ai.AsrRequest:
    short USE_ENCODER_PCM -> USE_ENCODER_PCM
    short USE_ENCODER_BV32_FLOAT -> USE_ENCODER_BV32_FLOAT
    short USE_ENCODER_OPUS -> USE_ENCODER_OPUS
    int OPUS_BITRATES_32K -> OPUS_BITRATES_32K
    int OPUS_BITRATES_64K -> OPUS_BITRATES_64K
    int OPUS_FRAMESIZE_640 -> OPUS_FRAMESIZE_640
    int OPUS_FRAMESIZE_1280 -> OPUS_FRAMESIZE_1280
    java.lang.String vendorStr -> vendorStr
    boolean useVad -> a
    boolean isForSai -> b
    boolean isRemoveEndPunctuation -> c
    com.xiaomi.ai.AsrRequest$DataInputMode mode -> d
    com.xiaomi.ai.AsrRequest$VadMode vadMode -> e
    java.lang.String lang -> f
    int preAsrTrack -> g
    short codecMode -> h
    int frameSize -> i
    int bitRates -> j
    java.lang.String dialect -> k
    boolean disableAsrTimeout -> l
    int maxTime -> m
    void <init>() -> <init>
    void setDisableAsrTimeout(boolean) -> setDisableAsrTimeout
    void setMaxAudioTime(int) -> setMaxAudioTime
    void setDialect(java.lang.String) -> setDialect
    void setLang(java.lang.String) -> setLang
    void setUseVad(boolean) -> setUseVad
    void setVadMode(com.xiaomi.ai.AsrRequest$VadMode) -> setVadMode
    java.lang.String getVendorStr() -> a
    void setDataInputMode(com.xiaomi.ai.AsrRequest$DataInputMode) -> setDataInputMode
    void setForSai(boolean) -> setForSai
    void setRemoveEndPunctuation(boolean) -> setRemoveEndPunctuation
    void setPreAsrTrack(int) -> setPreAsrTrack
    void enableEncoder(boolean) -> enableEncoder
    void setEncodeMode(short,int,int) -> setEncodeMode
com.xiaomi.ai.AsrRequest$DataInputMode -> com.xiaomi.ai.AsrRequest$DataInputMode:
    com.xiaomi.ai.AsrRequest$DataInputMode DATA_INPUT_MODE_RECORDER -> DATA_INPUT_MODE_RECORDER
    com.xiaomi.ai.AsrRequest$DataInputMode DATA_INPUT_MODE_BUFFER -> DATA_INPUT_MODE_BUFFER
    com.xiaomi.ai.AsrRequest$DataInputMode[] $VALUES -> $VALUES
    com.xiaomi.ai.AsrRequest$DataInputMode[] values() -> values
    com.xiaomi.ai.AsrRequest$DataInputMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.xiaomi.ai.AsrRequest$VadMode -> com.xiaomi.ai.AsrRequest$VadMode:
    com.xiaomi.ai.AsrRequest$VadMode VAD_MODE_LOCAL -> VAD_MODE_LOCAL
    com.xiaomi.ai.AsrRequest$VadMode VAD_MODE_CLOUD -> VAD_MODE_CLOUD
    com.xiaomi.ai.AsrRequest$VadMode[] $VALUES -> $VALUES
    com.xiaomi.ai.AsrRequest$VadMode[] values() -> values
    com.xiaomi.ai.AsrRequest$VadMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.xiaomi.ai.BluetoothManager -> com.xiaomi.ai.BluetoothManager:
    java.lang.String TAG -> TAG
    android.media.AudioManager mAudioManager -> mAudioManager
    android.bluetooth.BluetoothAdapter mBluetoothAdapter -> mBluetoothAdapter
    android.bluetooth.BluetoothDevice mBtDevice -> mBtDevice
    android.bluetooth.BluetoothHeadset mBtHeadset -> mBtHeadset
    android.content.Context mContext -> mContext
    boolean mBindBtSuccess -> mBindBtSuccess
    boolean mHasPendingRequest -> mHasPendingRequest
    android.content.BroadcastReceiver mScoStateReceiver -> mScoStateReceiver
    com.xiaomi.ai.BluetoothManager sInstance -> sInstance
    android.bluetooth.BluetoothProfile$ServiceListener mBtHeadsetServiceListener -> mBtHeadsetServiceListener
    com.xiaomi.ai.BluetoothManager getInstance(android.content.Context) -> getInstance
    void <init>(android.content.Context) -> <init>
    boolean canBluetooth() -> canBluetooth
    void setBluetoothOn(boolean) -> setBluetoothOn
    boolean isScoOn() -> isScoOn
    void register() -> register
    void unregister() -> unregister
    java.lang.String getBluetoothMacAddress() -> getBluetoothMacAddress
    java.lang.String getBluetoothName() -> getBluetoothName
    android.bluetooth.BluetoothHeadset access$002(com.xiaomi.ai.BluetoothManager,android.bluetooth.BluetoothHeadset) -> access$002
    android.bluetooth.BluetoothHeadset access$000(com.xiaomi.ai.BluetoothManager) -> access$000
    android.bluetooth.BluetoothDevice access$102(com.xiaomi.ai.BluetoothManager,android.bluetooth.BluetoothDevice) -> access$102
    boolean access$202(com.xiaomi.ai.BluetoothManager,boolean) -> access$202
    boolean access$300(com.xiaomi.ai.BluetoothManager) -> access$300
    boolean access$302(com.xiaomi.ai.BluetoothManager,boolean) -> access$302
com.xiaomi.ai.BluetoothManager$1 -> com.xiaomi.ai.a:
    com.xiaomi.ai.BluetoothManager this$0 -> a
    void <init>(com.xiaomi.ai.BluetoothManager) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.xiaomi.ai.BluetoothManager$2 -> com.xiaomi.ai.b:
    com.xiaomi.ai.BluetoothManager this$0 -> a
    void <init>(com.xiaomi.ai.BluetoothManager) -> <init>
    void onServiceConnected(int,android.bluetooth.BluetoothProfile) -> onServiceConnected
    void onServiceDisconnected(int) -> onServiceDisconnected
com.xiaomi.ai.BuildConfig -> com.xiaomi.ai.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String APPLICATION_ID -> APPLICATION_ID
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String FLAVOR -> FLAVOR
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    void <init>() -> <init>
com.xiaomi.ai.EventRequest -> com.xiaomi.ai.EventRequest:
    java.lang.String nameSpace -> a
    java.lang.String name -> b
    java.lang.String payload -> c
    java.lang.String contextNameSpace -> d
    java.lang.String contextName -> e
    java.lang.String contextPayload -> f
    boolean autoTts -> g
    boolean startNewSession -> h
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void startNewSession() -> startNewSession
    void addContext(java.lang.String,java.lang.String,java.lang.String) -> addContext
    void setAutoTts(boolean) -> setAutoTts
com.xiaomi.ai.HTTPCallback -> com.xiaomi.ai.HTTPCallback:
    void onHTTPRequestStart() -> onHTTPRequestStart
    void onHTTPRequestError(int,java.lang.String) -> onHTTPRequestError
    void onHTTPRequestResult(java.lang.String) -> onHTTPRequestResult
com.xiaomi.ai.Instruction -> com.xiaomi.ai.Instruction:
    java.lang.String nameSpace -> a
    java.lang.String name -> b
    java.lang.String sessionId -> c
    java.lang.String payload -> d
    java.lang.String id -> e
    void <init>() -> <init>
    java.lang.String getNameSpace() -> getNameSpace
    java.lang.String getName() -> getName
    java.lang.String getSessionId() -> getSessionId
    java.lang.String getPayload() -> getPayload
    java.lang.String getId() -> getId
com.xiaomi.ai.InstructionListener -> com.xiaomi.ai.InstructionListener:
    void onInstruction(com.xiaomi.ai.Instruction[],com.xiaomi.ai.SpeechResult) -> onInstruction
com.xiaomi.ai.MiAiEngine -> com.xiaomi.ai.c:
    java.lang.String TAG -> b
    android.text.SpannableStringBuilder mDebugInfo -> c
    int mEnv -> d
    java.lang.String mCustomNlpUrl -> e
    int MAX_SILENCE_TIME -> f
    int RECEIVER_TIMEOUT -> g
    int CONNECT_TIMEOUT -> h
    com.xiaomi.ai.streamplayer.StreamingPlayer mPlayer -> i
    boolean mKeepRecording -> j
    com.xiaomi.ai.MiAiEngine$AudioRecordThread mAudioRecordThread -> k
    android.media.AudioManager mAudioManager -> l
    com.xiaomi.ai.mibrain.MibrainRequest mMibrainRequest -> m
    com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper mCacheQueueHelper -> n
    java.lang.Object mSync -> o
    java.lang.Object mDebugLock -> p
    java.lang.String mLastSessionId -> q
    com.xiaomi.ai.SpeechEngine$ParamBuilder mLastParams -> r
    com.xiaomi.ai.MiAiOauthHelper mOauthHelper -> s
    int mAuthMode -> t
    java.lang.String mApiKey -> u
    java.lang.String mAnonymousAuthorization -> v
    java.lang.String mProxyClientId -> w
    int mTTSMode -> x
    java.util.concurrent.atomic.AtomicBoolean mSendWakeupFlag -> y
    com.xiaomi.ai.mibrain.GetAnonymousAuthorizationInterface inter -> a
    com.xiaomi.ai.streamplayer.StreamingPlayer$PlayListener mTtsPlayerListener -> z
    void <init>(android.content.Context,java.lang.String,java.lang.String) -> <init>
    void setTrackUploadCallback(com.xiaomi.ai.HTTPCallback) -> setTrackUploadCallback
    void doAsyncTrackUpload(com.xiaomi.ai.TrackInfo,java.lang.String,java.lang.String) -> doAsyncTrackUpload
    void doAsyncTrackUpload(com.xiaomi.ai.HTTPCallback,com.xiaomi.ai.TrackInfo,java.lang.String,java.lang.String) -> doAsyncTrackUpload
    int sendPendingNLPData(com.xiaomi.ai.NlpRequest) -> sendPendingNLPData
    void setTTSMode(int) -> setTTSMode
    void sendWakeupData(com.xiaomi.ai.SendWakeupDataStatusInterface,java.lang.String,java.lang.String,java.lang.String,int,int,java.lang.String,byte[]) -> sendWakeupData
    java.lang.String getAuthorizationToken(boolean) -> a
    java.lang.String getResourceDetails(java.lang.String,java.lang.String) -> getResourceDetails
    java.lang.String getAuthorizationToken(boolean,java.lang.String) -> a
    java.lang.String getScopeData() -> b
    boolean updateAnonymousProxyArgs(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateAnonymousProxyArgs
    void cleanUserLoginData() -> cleanUserLoginData
    void cleanUserLoginData(java.lang.String) -> cleanUserLoginData
    void cleanAllUserLoginData() -> cleanAllUserLoginData
    java.lang.String getAuthorizationValue(boolean) -> getAuthorizationValue
    java.lang.String getAuthorizationValue() -> getAuthorizationValue
    boolean setAuthorizationTokens(java.lang.String,java.lang.String,long) -> setAuthorizationTokens
    void init(android.content.Context,java.lang.String,int) -> init
    void release() -> release
    void doListenSpeech(com.xiaomi.ai.AsrRequest) -> doListenSpeech
    void endSpeech() -> endSpeech
    void doSpeak(com.xiaomi.ai.TtsRequest) -> doSpeak
    void doSemanticsParse(com.xiaomi.ai.NlpRequest) -> doSemanticsParse
    void doStartIntegrally(com.xiaomi.ai.SpeechEngine$ParamBuilder) -> doStartIntegrally
    void doVoiceprintRecognize(com.xiaomi.ai.VoiceprintRecognizeRequest) -> doVoiceprintRecognize
    void doVoiceprintRegister(com.xiaomi.ai.VoiceprintRegisterRequest) -> doVoiceprintRegister
    void endVoiceprintRegister() -> endVoiceprintRegister
    void endVoiceprintRecognize() -> endVoiceprintRecognize
    void doDeleteVoiceprint(com.xiaomi.ai.VoiceprintDeleteRequest) -> doDeleteVoiceprint
    void doQueryVoiceprint(com.xiaomi.ai.VoiceprintQueryRequest) -> doQueryVoiceprint
    void forceStop() -> forceStop
    void setMiAIOauthCallbacks(com.xiaomi.ai.MiAiOauthCallbacks) -> setMiAIOauthCallbacks
    void setMiAOOauthCallbacks(com.xiaomi.ai.MiAiOauthCallbacks) -> setMiAOOauthCallbacks
    void setAnonymousAuthCallbacks(com.xiaomi.ai.MiAiOauthCallbacks) -> setAnonymousAuthCallbacks
    void startTransThread(com.xiaomi.ai.SpeechEngine$ParamBuilder) -> a
    void setEnv(int) -> setEnv
    void setEnv(int,java.lang.String,java.lang.String) -> setEnv
    void setEnv(int,java.lang.String) -> setEnv
    void setCustomNlpUrl(java.lang.String) -> setCustomNlpUrl
    java.lang.CharSequence getLastRequestLog() -> a
    void logMsg(java.lang.CharSequence) -> a
    void logMsg(java.lang.CharSequence,java.lang.Throwable) -> a
    void addBuffer(byte[],int,int) -> addBuffer
    void updateMiotAuth(java.lang.String,java.lang.String) -> updateMiotAuth
    void updateTPAuth(java.lang.String) -> updateTPAuth
    com.xiaomi.ai.mibrain.MibrainRequestParams buildRequestMsg(com.xiaomi.ai.SpeechEngine$ParamBuilder) -> b
    com.xiaomi.ai.MiAiOauthHelper access$000(com.xiaomi.ai.MiAiEngine) -> a
    java.util.concurrent.atomic.AtomicBoolean access$100(com.xiaomi.ai.MiAiEngine) -> b
    java.lang.String access$200(com.xiaomi.ai.MiAiEngine) -> c
    int access$300(com.xiaomi.ai.MiAiEngine) -> d
    int access$400(com.xiaomi.ai.MiAiEngine) -> e
    java.lang.String access$702(com.xiaomi.ai.MiAiEngine,java.lang.String) -> a
    java.lang.Object access$800(com.xiaomi.ai.MiAiEngine) -> f
    com.xiaomi.ai.SpeechEngine$ParamBuilder access$900(com.xiaomi.ai.MiAiEngine) -> g
    com.xiaomi.ai.MiAiEngine$AudioRecordThread access$1000(com.xiaomi.ai.MiAiEngine) -> h
    void access$1100(com.xiaomi.ai.MiAiEngine,java.lang.CharSequence) -> a
    com.xiaomi.ai.mibrain.MibrainRequest access$1202(com.xiaomi.ai.MiAiEngine,com.xiaomi.ai.mibrain.MibrainRequest) -> a
    com.xiaomi.ai.mibrain.MibrainRequestParams access$1300(com.xiaomi.ai.MiAiEngine,com.xiaomi.ai.SpeechEngine$ParamBuilder) -> a
    com.xiaomi.ai.mibrain.MibrainRequest access$1200(com.xiaomi.ai.MiAiEngine) -> i
    com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper access$1400(com.xiaomi.ai.MiAiEngine) -> j
    com.xiaomi.ai.MiAiEngine$AudioRecordThread access$1002(com.xiaomi.ai.MiAiEngine,com.xiaomi.ai.MiAiEngine$AudioRecordThread) -> a
    void access$2200(com.xiaomi.ai.MiAiEngine,java.lang.CharSequence,java.lang.Throwable) -> a
    boolean access$2300(com.xiaomi.ai.MiAiEngine) -> k
    boolean access$2302(com.xiaomi.ai.MiAiEngine,boolean) -> a
    com.xiaomi.ai.streamplayer.StreamingPlayer access$2500(com.xiaomi.ai.MiAiEngine) -> l
    java.lang.String access$2702(com.xiaomi.ai.MiAiEngine,java.lang.String) -> b
    android.media.AudioManager access$2800(com.xiaomi.ai.MiAiEngine) -> m
    com.xiaomi.ai.streamplayer.StreamingPlayer access$2502(com.xiaomi.ai.MiAiEngine,com.xiaomi.ai.streamplayer.StreamingPlayer) -> a
    com.xiaomi.ai.streamplayer.StreamingPlayer$PlayListener access$2900(com.xiaomi.ai.MiAiEngine) -> n
    int access$3000(com.xiaomi.ai.MiAiEngine) -> o
com.xiaomi.ai.MiAiEngine$1 -> com.xiaomi.ai.d:
    com.xiaomi.ai.SendWakeupDataStatusInterface val$inter -> a
    com.xiaomi.ai.MiAiEngine this$0 -> b
    void <init>(com.xiaomi.ai.MiAiEngine,com.xiaomi.ai.SendWakeupDataStatusInterface) -> <init>
    void onRequestSessionStart(com.xiaomi.ai.mibrain.MibrainRequest) -> onRequestSessionStart
    void onRequestError(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String,int,int) -> onRequestError
    java.lang.String onRequestGetToken(com.xiaomi.ai.mibrain.MibrainRequest,boolean) -> onRequestGetToken
    void onRequestOtherResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onRequestOtherResult
    void onRequestNLpResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onRequestNLpResult
    void onRequestASRResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String,boolean) -> onRequestASRResult
    void onRequestTTSResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String,byte[],boolean) -> onRequestTTSResult
    void onInstruction(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onInstruction
    void onRequestVoiceprintRecognizedResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onRequestVoiceprintRecognizedResult
    void onRequestVoiceprintRegisteredResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String,boolean) -> onRequestVoiceprintRegisteredResult
    void onRequestVoiceprintQueryResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onRequestVoiceprintQueryResult
    void onRequestVoiceprintDeleteResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onRequestVoiceprintDeleteResult
    void onRequestSessionEnd(com.xiaomi.ai.mibrain.MibrainRequest) -> onRequestSessionEnd
    java.lang.String onNeedUpdateToken() -> onNeedUpdateToken
com.xiaomi.ai.MiAiEngine$2 -> com.xiaomi.ai.e:
    int val$channel -> a
    java.lang.String val$codec -> b
    java.lang.String val$vendor -> c
    java.lang.String val$wakeup_word -> d
    int val$rate -> e
    java.lang.String val$extra -> f
    byte[] val$data -> g
    com.xiaomi.ai.mibrain.MibrainRequestListener val$listener -> h
    com.xiaomi.ai.MiAiEngine this$0 -> i
    void <init>(com.xiaomi.ai.MiAiEngine,int,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,byte[],com.xiaomi.ai.mibrain.MibrainRequestListener) -> <init>
    void run() -> run
com.xiaomi.ai.MiAiEngine$3 -> com.xiaomi.ai.f:
    com.xiaomi.ai.MiAiEngine this$0 -> a
    void <init>(com.xiaomi.ai.MiAiEngine) -> <init>
    void onGetAnonymousAuthorization(java.lang.String) -> onGetAnonymousAuthorization
com.xiaomi.ai.MiAiEngine$4 -> com.xiaomi.ai.g:
    com.xiaomi.ai.SpeechEngine$ParamBuilder val$b -> a
    com.xiaomi.ai.MiAiEngine this$0 -> b
    void <init>(com.xiaomi.ai.MiAiEngine,com.xiaomi.ai.SpeechEngine$ParamBuilder) -> <init>
    void run() -> run
com.xiaomi.ai.MiAiEngine$5 -> com.xiaomi.ai.h:
    com.xiaomi.ai.MiAiEngine this$0 -> a
    void <init>(com.xiaomi.ai.MiAiEngine) -> <init>
    void onPlayStart(com.xiaomi.ai.streamplayer.StreamingPlayer,android.media.AudioTrack) -> a
    void onError(com.xiaomi.ai.streamplayer.StreamingPlayer,int,java.lang.String) -> a
    void onPlayFinish(com.xiaomi.ai.streamplayer.StreamingPlayer) -> a
    void onGetPCM(com.xiaomi.ai.streamplayer.StreamingPlayer,com.xiaomi.ai.PCMInfo) -> a
com.xiaomi.ai.MiAiEngine$6 -> com.xiaomi.ai.i:
    int[] $SwitchMap$com$xiaomi$ai$SpeechEngine$ProcessStage -> a
    void <clinit>() -> <clinit>
com.xiaomi.ai.MiAiEngine$AudioRecordThread -> com.xiaomi.ai.c$a:
    com.xiaomi.ai.mibrain.MibrainRequest request -> b
    boolean isNotifyEnd -> c
    com.xiaomi.ai.SpeechEngine$ParamBuilder paramBuilder -> d
    com.xiaomi.ai.MiAiEngine this$0 -> a
    void <init>(com.xiaomi.ai.MiAiEngine,com.xiaomi.ai.mibrain.MibrainRequest,com.xiaomi.ai.SpeechEngine$ParamBuilder) -> <init>
    boolean isRecorderMode() -> a
    boolean isBufferMode() -> b
    boolean shouldReturn() -> c
    void run() -> run
    boolean tryNotifyAsrReadyOfSpeech() -> d
    boolean tryNotifyAsrBeginningOfSpeech() -> e
    void tryNotifyAsrEndOfSpeechEnd() -> f
    boolean tryNotifyRecBeginningOfSpeech() -> g
    void tryNotifyRecEndOfSpeechEnd() -> h
    boolean tryNotifyRegBeginningOfSpeech() -> i
    void tryNotifyRegEndOfSpeechEnd() -> j
    void notifyBuffer(com.xiaomi.ai.MiAiEngine$BufferPackage) -> a
    void readFromBytesQue(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper) -> a
    void recordingToBuffer(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper) -> b
    void access$2600(com.xiaomi.ai.MiAiEngine$AudioRecordThread) -> a
com.xiaomi.ai.MiAiEngine$BufferPackage -> com.xiaomi.ai.c$b:
    byte[] bytes -> a
    boolean end -> b
    boolean div -> c
    com.xiaomi.ai.MiAiEngine$BufferPackageType type -> d
    com.xiaomi.ai.MiAiEngine this$0 -> e
    void <init>(com.xiaomi.ai.MiAiEngine,byte[],int,int,boolean) -> <init>
    void <init>(com.xiaomi.ai.MiAiEngine,byte[],int,int,boolean,boolean) -> <init>
    void <init>(com.xiaomi.ai.MiAiEngine,com.xiaomi.ai.MiAiEngine$BufferPackageType) -> <init>
com.xiaomi.ai.MiAiEngine$BufferPackageType -> com.xiaomi.ai.c$c:
    com.xiaomi.ai.MiAiEngine$BufferPackageType DATA -> DATA
    com.xiaomi.ai.MiAiEngine$BufferPackageType FLAG_ABANDON_START -> FLAG_ABANDON_START
    com.xiaomi.ai.MiAiEngine$BufferPackageType FLAG_ABANDON_END -> FLAG_ABANDON_END
    com.xiaomi.ai.MiAiEngine$BufferPackageType[] $VALUES -> a
    com.xiaomi.ai.MiAiEngine$BufferPackageType[] values() -> values
    com.xiaomi.ai.MiAiEngine$BufferPackageType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.xiaomi.ai.MiAiEngine$EngineRequestHelper -> com.xiaomi.ai.c$d:
    com.xiaomi.ai.mibrain.MibrainRequest request -> b
    com.xiaomi.ai.MiAiEngine$AudioRecordThread audioRecordThread -> c
    boolean isEmptyResult -> d
    com.xiaomi.ai.SpeechEngine$ParamBuilder paramBuilder -> e
    com.xiaomi.ai.SpeechEngine$ProcessStage mStage -> f
    java.lang.String mEventLevel -> g
    com.xiaomi.ai.MiAiEngine this$0 -> a
    void <init>(com.xiaomi.ai.MiAiEngine,com.xiaomi.ai.SpeechEngine$ParamBuilder,com.xiaomi.ai.mibrain.MibrainRequest) -> <init>
    java.lang.String getEventLevel() -> a
    void setAudioRecordThread(com.xiaomi.ai.MiAiEngine$AudioRecordThread) -> a
    boolean isResponseCorrect(com.xiaomi.ai.mibrain.MibrainRequest) -> a
    void onRequestVoiceprintRecognizedResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onRequestVoiceprintRecognizedResult
    void onRequestVoiceprintRegisteredResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String,boolean) -> onRequestVoiceprintRegisteredResult
    void onRequestVoiceprintQueryResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onRequestVoiceprintQueryResult
    void onRequestVoiceprintDeleteResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onRequestVoiceprintDeleteResult
    java.lang.String onRequestGetToken(com.xiaomi.ai.mibrain.MibrainRequest,boolean) -> onRequestGetToken
    boolean shouldReturn(com.xiaomi.ai.mibrain.MibrainRequest) -> b
    void onRequestSessionStart(com.xiaomi.ai.mibrain.MibrainRequest) -> onRequestSessionStart
    void onRequestError(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String,int,int) -> onRequestError
    void onRequestOtherResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onRequestOtherResult
    void onRequestNLpResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onRequestNLpResult
    void onRequestASRResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String,boolean) -> onRequestASRResult
    void onRequestTTSResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String,byte[],boolean) -> onRequestTTSResult
    void onInstruction(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> onInstruction
    void onRequestSessionEnd(com.xiaomi.ai.mibrain.MibrainRequest) -> onRequestSessionEnd
    java.lang.String onNeedUpdateToken() -> onNeedUpdateToken
    void resolveBinaryResult(com.xiaomi.ai.mibrain.MibrainRequest,byte[]) -> a
    void checkVadEnd(com.xiaomi.ai.mibrain.MibrainRequest,org.json.JSONObject) -> a
    void resolveTxtResult(com.xiaomi.ai.mibrain.MibrainRequest,java.lang.String) -> a
    com.xiaomi.ai.SpeechError checkResponseError(org.json.JSONObject) -> a
    com.xiaomi.ai.SpeechEngine$ProcessStage access$2400(com.xiaomi.ai.MiAiEngine$EngineRequestHelper) -> a
com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper -> com.xiaomi.ai.c$e:
    java.util.concurrent.BlockingQueue blockingQueue -> b
    com.xiaomi.ai.mibrain.MibrainRequest mibrainRequest -> c
    com.xiaomi.ai.SpeechEngine$ParamBuilder paramBuilder -> d
    boolean needBreak -> e
    java.lang.Thread thread -> f
    com.xiaomi.ai.MiAiEngine$EngineRequestHelper requestHelper -> g
    java.lang.Runnable runnable -> h
    com.xiaomi.ai.MiAiEngine this$0 -> a
    void attachRequest(com.xiaomi.ai.mibrain.MibrainRequest) -> a
    void attachRequestHelper(com.xiaomi.ai.MiAiEngine$EngineRequestHelper) -> a
    void <init>(com.xiaomi.ai.MiAiEngine,com.xiaomi.ai.SpeechEngine$ParamBuilder) -> <init>
    boolean shouldReturn() -> a
    com.xiaomi.ai.MiAiEngine$BufferPackage processBufferPackage() -> b
    boolean isRunning() -> c
    void add(com.xiaomi.ai.MiAiEngine$BufferPackage) -> a
    void start() -> d
    void stop() -> e
    void forceStop() -> f
    void access$500(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper) -> a
    void access$600(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper,com.xiaomi.ai.MiAiEngine$BufferPackage) -> a
    void access$1500(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper,com.xiaomi.ai.mibrain.MibrainRequest) -> a
    void access$1600(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper,com.xiaomi.ai.MiAiEngine$EngineRequestHelper) -> a
    void access$1700(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper) -> b
    void access$1800(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper) -> c
    boolean access$1900(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper) -> d
    com.xiaomi.ai.MiAiEngine$BufferPackage access$2000(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper) -> e
    java.util.concurrent.BlockingQueue access$2100(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper) -> f
com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper$1 -> com.xiaomi.ai.j:
    com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper this$1 -> a
    void <init>(com.xiaomi.ai.MiAiEngine$RecorderCacheQueueHelper) -> <init>
    void run() -> run
com.xiaomi.ai.MiAiOauthCallbacks -> com.xiaomi.ai.MiAiOauthCallbacks:
    java.lang.String getOauthCode() -> getOauthCode
com.xiaomi.ai.MiAiOauthHelper -> com.xiaomi.ai.k:
    java.lang.String XML_NAME -> a
    java.lang.String TAG -> b
    com.xiaomi.ai.MiAiOauthCallbacks mCallbacks -> c
    android.content.Context mContext -> d
    com.xiaomi.ai.mibrain.MibrainOauthManager mOauthManager -> e
    int mRef -> f
    boolean mIsRelease -> g
    boolean mIsInited -> h
    java.lang.Object mRefSync -> i
    com.xiaomi.ai.mibrain.MibrainOauthManagerCallbacks mMibrainOauthManagerCallbacksImpl -> j
    void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String getOauthStatus() -> a
    java.lang.String getOauthStatus(java.lang.String) -> a
    void init() -> b
    int setAnonymousArgs(java.lang.String,java.lang.String,java.lang.String,int) -> a
    int updateAnonymousArgs(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String genAnonymousAuthorization(java.lang.String,java.lang.String,java.lang.String) -> a
    void setPt(int) -> a
    boolean setAuthorizationTokens(int,java.lang.String,java.lang.String,java.lang.String,long) -> a
    void refIncrement() -> h
    void refDecrement() -> i
    boolean checkRelease() -> j
    void release() -> c
    void setListener(com.xiaomi.ai.MiAiOauthCallbacks) -> a
    void setEnv(int) -> b
    void setTimeout(int) -> c
    java.lang.String getTelephonyDeviceId(android.content.Context) -> a
    java.lang.String getScopeData(java.lang.String) -> b
    com.xiaomi.ai.MiAiOauthHelper$MiAiOauthResult getAccessToken(boolean) -> a
    void cleanOauthData() -> d
    void cleanOauthData(java.lang.String) -> c
    void cleanAllOauthData() -> e
    java.lang.String access$000() -> f
    android.content.Context access$100(com.xiaomi.ai.MiAiOauthHelper) -> a
    java.lang.String access$200() -> g
    com.xiaomi.ai.MiAiOauthCallbacks access$300(com.xiaomi.ai.MiAiOauthHelper) -> b
    void <clinit>() -> <clinit>
com.xiaomi.ai.MiAiOauthHelper$1 -> com.xiaomi.ai.l:
    com.xiaomi.ai.MiAiOauthHelper this$0 -> a
    void <init>(com.xiaomi.ai.MiAiOauthHelper) -> <init>
    java.lang.String getOauthData(java.lang.String) -> getOauthData
    boolean putOauthData(java.lang.String,java.lang.String) -> putOauthData
    java.lang.String getOauthCode() -> getOauthCode
com.xiaomi.ai.MiAiOauthHelper$MiAiOauthResult -> com.xiaomi.ai.k$a:
    java.lang.String result -> a
    int error -> b
    void <init>() -> <init>
com.xiaomi.ai.NeedUpdateTokenCallback -> com.xiaomi.ai.NeedUpdateTokenCallback:
    java.lang.String onNeedUpdateToken() -> onNeedUpdateToken
com.xiaomi.ai.NlpListener -> com.xiaomi.ai.NlpListener:
    void onResult(com.xiaomi.ai.SpeechResult) -> onResult
    void onError(com.xiaomi.ai.SpeechError) -> onError
com.xiaomi.ai.NlpRequest -> com.xiaomi.ai.NlpRequest:
    java.lang.String TAG -> TAG
    java.lang.String textToProcess -> textToProcess
    java.lang.String locale -> locale
    boolean startNewSession -> startNewSession
    java.lang.Float latitude -> latitude
    java.lang.Float longitude -> longitude
    java.util.HashMap contextMap -> contextMap
    java.util.HashMap contextStrMap -> contextStrMap
    java.lang.String intention -> intention
    com.xiaomi.ai.NlpRequest$UserInfo userInfo -> userInfo
    java.lang.String nlpVersion -> nlpVersion
    org.json.JSONObject speechData -> speechData
    org.json.JSONObject device -> device
    org.json.JSONObject context -> context
    boolean locationEnable -> locationEnable
    java.lang.String requestId -> requestId
    int isPendingSend -> isPendingSend
    boolean discardInstructionOfNlpResult -> discardInstructionOfNlpResult
    void <init>() -> <init>
    void setIsPendingSend(int) -> setIsPendingSend
    void setRequestId(java.lang.String) -> setRequestId
    void setLocationEnable(boolean) -> setLocationEnable
    void setSoundboxContext(com.xiaomi.ai.NlpRequest$SoundboxContext) -> setSoundboxContext
    void setIntention(java.lang.String) -> setIntention
    void setContext(java.lang.String,java.lang.String) -> setContext
    void setContextStr(java.lang.String,java.lang.String) -> setContextStr
    void setUserInfo(com.xiaomi.ai.NlpRequest$UserInfo) -> setUserInfo
    void setTextToProcess(java.lang.String) -> setTextToProcess
    java.lang.String getTextToProcess() -> getTextToProcess
    void setLocale(java.lang.String) -> setLocale
    void setLatitude(float) -> setLatitude
    void setLongitude(float) -> setLongitude
    void setNlpVersion(java.lang.String) -> setNlpVersion
    void setContext(org.json.JSONObject) -> setContext
    void startNewSession() -> startNewSession
    void startNewSession(boolean) -> startNewSession
    void setSpeechData(org.json.JSONObject) -> setSpeechData
    void setDevice(org.json.JSONObject) -> setDevice
    java.lang.String getLocal() -> getLocal
    void setDiscardInstructionOfNlpResult(boolean) -> setDiscardInstructionOfNlpResult
com.xiaomi.ai.NlpRequest$SoundboxContext -> com.xiaomi.ai.NlpRequest$SoundboxContext:
    int PLAYER_TYPE_MUSIC -> PLAYER_TYPE_MUSIC
    int PLAYER_TYPE_STATION_SOUND -> PLAYER_TYPE_STATION_SOUND
    int PLAYER_STATUS_STOP -> PLAYER_STATUS_STOP
    int PLAYER_STATUS_PLAY -> PLAYER_STATUS_PLAY
    int PLAYER_STATUS_PAUSE -> PLAYER_STATUS_PAUSE
    int PLAYER_MODE_SINGLE -> PLAYER_MODE_SINGLE
    int PLAYER_MODE_LOOP -> PLAYER_MODE_LOOP
    int PLAYER_MODE_SEQUENCE -> PLAYER_MODE_SEQUENCE
    int PLAYER_MODE_RANDOM -> PLAYER_MODE_RANDOM
    int playerStatus -> playerStatus
    int playerMode -> playerMode
    int playerVolume -> playerVolume
    int playerType -> playerType
    int offset -> offset
    java.lang.String listId -> listId
    java.lang.String mediaId -> mediaId
    java.lang.String globalId -> globalId
    java.lang.String originl -> originl
    java.lang.String mediaName -> mediaName
    java.lang.String artistName -> artistName
    java.lang.String albumId -> albumId
    java.lang.String albumName -> albumName
    void <init>() -> <init>
    void setListId(java.lang.String) -> setListId
    void setGlobalId(java.lang.String) -> setGlobalId
    void setMediaId(java.lang.String) -> setMediaId
    void setOriginl(java.lang.String) -> setOriginl
    void setPlayerStatus(int) -> setPlayerStatus
    void setPlayerMode(int) -> setPlayerMode
    void setPlayerVolume(int) -> setPlayerVolume
    void setPlayerType(int) -> setPlayerType
    void setOffset(int) -> setOffset
    void setMediaName(java.lang.String) -> setMediaName
    void setAlbumId(java.lang.String) -> setAlbumId
    void setAlbumName(java.lang.String) -> setAlbumName
    void setArtistName(java.lang.String) -> setArtistName
    org.json.JSONObject toContextJson() -> toContextJson
com.xiaomi.ai.NlpRequest$UserInfo -> com.xiaomi.ai.NlpRequest$UserInfo:
    java.lang.String userId -> userId
    java.lang.String userType -> userType
    java.lang.String extend -> extend
    void <init>() -> <init>
    void setUserId(java.lang.String) -> setUserId
    void setUserType(java.lang.String) -> setUserType
    void setExtend(java.lang.String) -> setExtend
com.xiaomi.ai.PCMInfo -> com.xiaomi.ai.PCMInfo:
    int sample_rate -> sample_rate
    int channels -> channels
    int bit -> bit
    boolean eof -> eof
    byte[] pcm -> pcm
    void <init>(int,int,int,boolean,byte[]) -> <init>
    int getSampleRate() -> getSampleRate
    int getChannels() -> getChannels
    int getBit() -> getBit
    boolean getEOF() -> getEOF
    byte[] getPCM() -> getPCM
com.xiaomi.ai.SendWakeupDataStatusInterface -> com.xiaomi.ai.SendWakeupDataStatusInterface:
    void onSendStart() -> onSendStart
    void onSendResult(java.lang.String) -> onSendResult
    void onSendEnd() -> onSendEnd
    void onSendError(java.lang.String) -> onSendError
com.xiaomi.ai.ServiceEvent -> com.xiaomi.ai.ServiceEvent:
    java.lang.String mEventLevel -> mEventLevel
    int mEventCode -> mEventCode
    java.lang.String mEventMsg -> mEventMsg
    int mEventTransactionStatus -> mEventTransactionStatus
    org.json.JSONObject mEventNode -> mEventNode
    int SERVICE_EVENT_TRANSACTION_STATUS_UNKNOWN -> SERVICE_EVENT_TRANSACTION_STATUS_UNKNOWN
    int SERVICE_EVENT_TRANSACTION_STATUS_STILL -> SERVICE_EVENT_TRANSACTION_STATUS_STILL
    int SERVICE_EVENT_TRANSACTION_STATUS_ENDED -> SERVICE_EVENT_TRANSACTION_STATUS_ENDED
    int SERVICE_EVENT_TRUNCATED -> SERVICE_EVENT_TRUNCATED
    org.json.JSONObject getEventNode() -> getEventNode
    void setEventNode(org.json.JSONObject) -> setEventNode
    void setEventCode(int) -> setEventCode
    void setEventLevel(java.lang.String) -> setEventLevel
    void setEventMsg(java.lang.String) -> setEventMsg
    int getEventCode() -> getEventCode
    java.lang.String getEventLevel() -> getEventLevel
    java.lang.String getEventMsg() -> getEventMsg
    int getTransactionStatus() -> getTransactionStatus
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,org.json.JSONObject) -> <init>
com.xiaomi.ai.ServiceEventListener -> com.xiaomi.ai.ServiceEventListener:
    void onEvent(com.xiaomi.ai.ServiceEvent) -> onEvent
com.xiaomi.ai.SpeechEngine -> com.xiaomi.ai.SpeechEngine:
    java.lang.String TAG -> TAG
    int ENGINE_MI_AI -> ENGINE_MI_AI
    int ENGINE_AUTH_APPIDTOKEN -> ENGINE_AUTH_APPIDTOKEN
    int ENGINE_AUTH_MIOT -> ENGINE_AUTH_MIOT
    int ENGINE_AUTH_MIAI -> ENGINE_AUTH_MIAI
    int ENGINE_AUTH_TP -> ENGINE_AUTH_TP
    int ENGINE_AUTH_MIAO -> ENGINE_AUTH_MIAO
    int ENGINE_AUTH_ANONYMOUS -> ENGINE_AUTH_ANONYMOUS
    int ENGINE_AUTH_ANONYMOUS_PROXY -> ENGINE_AUTH_ANONYMOUS_PROXY
    int ENV_STAGING -> ENV_STAGING
    int ENV_PREVIEW -> ENV_PREVIEW
    int ENV_PRODUCTION -> ENV_PRODUCTION
    int ENV_PRODUCTION_SGP -> ENV_PRODUCTION_SGP
    int USE_ANONYMOUS -> USE_ANONYMOUS
    int USE_ANONYMOUS_PROXY -> USE_ANONYMOUS_PROXY
    int STREAMING_PLAYER_DEFAULT -> STREAMING_PLAYER_DEFAULT
    int STREAMING_PLAYER_GET_PCM -> STREAMING_PLAYER_GET_PCM
    java.lang.String mUserAgent -> mUserAgent
    com.xiaomi.ai.SpeechResultParser mResultParser -> mResultParser
    com.xiaomi.ai.SpeechError mSpeechError -> mSpeechError
    android.content.Context mContext -> mContext
    com.xiaomi.ai.AsrListener mAsrListener -> mAsrListener
    com.xiaomi.ai.NlpListener mNlpListener -> mNlpListener
    com.xiaomi.ai.TtsListener mTtsListener -> mTtsListener
    com.xiaomi.ai.VoiceprintRecognizeListener mVPListener -> mVPListener
    com.xiaomi.ai.VoiceprintRegisterListener mVPRListener -> mVPRListener
    com.xiaomi.ai.VoiceprintDeleteListener mVPDelListener -> mVPDelListener
    com.xiaomi.ai.VoiceprintQueryListener mVPQryListener -> mVPQryListener
    com.xiaomi.ai.MiAiOauthCallbacks mOauthListener -> mOauthListener
    com.xiaomi.ai.ServiceEventListener mServiceEventListener -> mServiceEventListener
    com.xiaomi.ai.InstructionListener mInstructionListener -> mInstructionListener
    java.lang.String mAppId -> mAppId
    java.lang.String mToken -> mToken
    java.lang.String mRedirectUrl -> mRedirectUrl
    int mAuthMode -> mAuthMode
    boolean mIsScoEnable -> mIsScoEnable
    com.xiaomi.ai.BluetoothManager mBluetoothManager -> mBluetoothManager
    java.lang.String mDeviceModel -> mDeviceModel
    int mStreamType -> mStreamType
    com.xiaomi.ai.NeedUpdateTokenCallback mUpdateTokenCallback -> mUpdateTokenCallback
    com.xiaomi.ai.utils.TrackUtils mTrackUtils -> mTrackUtils
    void setUpdateTokenCallback(com.xiaomi.ai.NeedUpdateTokenCallback) -> setUpdateTokenCallback
    void <init>(android.content.Context,java.lang.String,java.lang.String) -> <init>
    void setTrackUploadCallback(com.xiaomi.ai.HTTPCallback) -> setTrackUploadCallback
    void doAsyncTrackUpload(com.xiaomi.ai.TrackInfo,java.lang.String,java.lang.String) -> doAsyncTrackUpload
    void doAsyncTrackUpload(com.xiaomi.ai.HTTPCallback,com.xiaomi.ai.TrackInfo,java.lang.String,java.lang.String) -> doAsyncTrackUpload
    int sendPendingNLPData(com.xiaomi.ai.NlpRequest) -> sendPendingNLPData
    java.lang.String getAuthorizationValue() -> getAuthorizationValue
    java.lang.String getAuthorizationValue(boolean) -> getAuthorizationValue
    boolean setAuthorizationTokens(java.lang.String,java.lang.String,long) -> setAuthorizationTokens
    void cleanUserLoginData() -> cleanUserLoginData
    void cleanUserLoginData(java.lang.String) -> cleanUserLoginData
    void cleanAllUserLoginData() -> cleanAllUserLoginData
    boolean updateAnonymousProxyArgs(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateAnonymousProxyArgs
    void setTTSMode(int) -> setTTSMode
    void sendWakeupData(com.xiaomi.ai.SendWakeupDataStatusInterface,java.lang.String,java.lang.String,java.lang.String,int,int,java.lang.String,byte[]) -> sendWakeupData
    java.lang.String getResourceDetails(java.lang.String,java.lang.String) -> getResourceDetails
    com.xiaomi.ai.SpeechEngine createEngine(android.content.Context,int,java.lang.String,java.lang.String,java.lang.String,int) -> createEngine
    com.xiaomi.ai.SpeechEngine createEngine(android.content.Context,int,java.lang.String,java.lang.String) -> createEngine
    com.xiaomi.ai.SpeechEngine createEngine(android.content.Context,int,java.lang.String,java.lang.String,java.lang.String) -> createEngine
    com.xiaomi.ai.SpeechEngine createEngine(android.content.Context,int,java.lang.String,java.lang.String,java.lang.String,boolean) -> createEngine
    com.xiaomi.ai.SpeechEngine createEngine(android.content.Context,int,java.lang.String) -> createEngine
    com.xiaomi.ai.SpeechEngine createEngine(android.content.Context,int,java.lang.String,boolean) -> createEngine
    void updateMiotAuth(java.lang.String,java.lang.String) -> updateMiotAuth
    void updateTPAuth(java.lang.String) -> updateTPAuth
    void setDeviceModel(java.lang.String) -> setDeviceModel
    void enableScoCheck(boolean) -> enableScoCheck
    void release() -> release
    void init(android.content.Context,java.lang.String,int) -> init
    void forceStop() -> forceStop
    void setCustomNlpUrl(java.lang.String) -> setCustomNlpUrl
    void addBuffer(byte[],int,int) -> addBuffer
    void listenSpeech(com.xiaomi.ai.AsrRequest) -> listenSpeech
    void doListenSpeech(com.xiaomi.ai.AsrRequest) -> doListenSpeech
    void endSpeech() -> endSpeech
    void semanticsParse(com.xiaomi.ai.NlpRequest) -> semanticsParse
    void voiceprintRegister(com.xiaomi.ai.VoiceprintRegisterRequest) -> voiceprintRegister
    void endVoiceprintRegister() -> endVoiceprintRegister
    void doVoiceprintRegister(com.xiaomi.ai.VoiceprintRegisterRequest) -> doVoiceprintRegister
    void voicePrintRecognize(com.xiaomi.ai.VoiceprintRecognizeRequest) -> voicePrintRecognize
    void endVoiceprintRecognize() -> endVoiceprintRecognize
    void doVoiceprintRecognize(com.xiaomi.ai.VoiceprintRecognizeRequest) -> doVoiceprintRecognize
    void doSemanticsParse(com.xiaomi.ai.NlpRequest) -> doSemanticsParse
    void deleteVoiceprint(com.xiaomi.ai.VoiceprintDeleteRequest) -> deleteVoiceprint
    void queryVoiceprint(com.xiaomi.ai.VoiceprintQueryRequest) -> queryVoiceprint
    void doDeleteVoiceprint(com.xiaomi.ai.VoiceprintDeleteRequest) -> doDeleteVoiceprint
    void doQueryVoiceprint(com.xiaomi.ai.VoiceprintQueryRequest) -> doQueryVoiceprint
    void speak(com.xiaomi.ai.TtsRequest) -> speak
    void doSpeak(com.xiaomi.ai.TtsRequest) -> doSpeak
    void startIntegrally(com.xiaomi.ai.SpeechEngine$ParamBuilder) -> startIntegrally
    void doStartIntegrally(com.xiaomi.ai.SpeechEngine$ParamBuilder) -> doStartIntegrally
    com.xiaomi.ai.SpeechEngine$ProcessStage getNextStage(com.xiaomi.ai.SpeechEngine$ParamBuilder,com.xiaomi.ai.SpeechEngine$ProcessStage) -> getNextStage
    com.xiaomi.ai.SpeechError getError() -> getError
    boolean hasError() -> hasError
    void setUserAgent(java.lang.String) -> setUserAgent
    void setAsrLisnter(com.xiaomi.ai.AsrListener) -> setAsrLisnter
    void setNlpListener(com.xiaomi.ai.NlpListener) -> setNlpListener
    void setTtsListener(com.xiaomi.ai.TtsListener) -> setTtsListener
    void setVoiceprintRegistListener(com.xiaomi.ai.VoiceprintRegisterListener) -> setVoiceprintRegistListener
    void setVoiceprintReconListener(com.xiaomi.ai.VoiceprintRecognizeListener) -> setVoiceprintReconListener
    void setVoiceprintDeleteListener(com.xiaomi.ai.VoiceprintDeleteListener) -> setVoiceprintDeleteListener
    void setVoiceprintQueryListener(com.xiaomi.ai.VoiceprintQueryListener) -> setVoiceprintQueryListener
    void setInstructionListener(com.xiaomi.ai.InstructionListener) -> setInstructionListener
    void setMiAIOauthCallbacks(com.xiaomi.ai.MiAiOauthCallbacks) -> setMiAIOauthCallbacks
    void setMiAOOauthCallbacks(com.xiaomi.ai.MiAiOauthCallbacks) -> setMiAOOauthCallbacks
    void setAnonymousAuthCallbacks(com.xiaomi.ai.MiAiOauthCallbacks) -> setAnonymousAuthCallbacks
    void setServiceEventListener(com.xiaomi.ai.ServiceEventListener) -> setServiceEventListener
    void notifyAsrReadyForSpeech() -> notifyAsrReadyForSpeech
    void setTtsAudioStreamType(int) -> setTtsAudioStreamType
    void notifyAsrBeginningOfSpeech() -> notifyAsrBeginningOfSpeech
    void notifyVoiceRegBeginningOfSpeech() -> notifyVoiceRegBeginningOfSpeech
    void notifyVoiceRecBeginningOfSpeech() -> notifyVoiceRecBeginningOfSpeech
    void notifyAsrRmsChanged(float) -> notifyAsrRmsChanged
    void notifyVoiceRegRmsChanged(float) -> notifyVoiceRegRmsChanged
    void notifyVoiceRecRmsChanged(float) -> notifyVoiceRecRmsChanged
    void notifyAsrBufferReceived(byte[]) -> notifyAsrBufferReceived
    void notifyVoiceRegBufferReceived(byte[]) -> notifyVoiceRegBufferReceived
    void notifyVoiceRecBufferReceived(byte[]) -> notifyVoiceRecBufferReceived
    void notifyAsrEndOfSpeech() -> notifyAsrEndOfSpeech
    void setBluetoothOn(boolean) -> setBluetoothOn
    void notifyVoiceRegEndOfSpeech() -> notifyVoiceRegEndOfSpeech
    void notifyVoiceRecEndOfSpeech() -> notifyVoiceRecEndOfSpeech
    void notifyAsrError(com.xiaomi.ai.SpeechError) -> notifyAsrError
    void notifyVoiceRegError(com.xiaomi.ai.SpeechError) -> notifyVoiceRegError
    void notifyVoiceRecError(com.xiaomi.ai.SpeechError) -> notifyVoiceRecError
    void notifyVoiceDelError(com.xiaomi.ai.SpeechError) -> notifyVoiceDelError
    void notifyVoiceQryError(com.xiaomi.ai.SpeechError) -> notifyVoiceQryError
    void notifyAsrResults(com.xiaomi.ai.SpeechResult) -> notifyAsrResults
    void notifyVoiceRegResults(com.xiaomi.ai.SpeechResult) -> notifyVoiceRegResults
    void notifyVoiceDelResults(com.xiaomi.ai.SpeechResult) -> notifyVoiceDelResults
    void notifyVoiceQryResults(com.xiaomi.ai.SpeechResult) -> notifyVoiceQryResults
    void notifyVoiceRecResults(com.xiaomi.ai.SpeechResult) -> notifyVoiceRecResults
    void notifyServiceEvent(com.xiaomi.ai.ServiceEvent) -> notifyServiceEvent
    void notifyInstruction(com.xiaomi.ai.Instruction[],com.xiaomi.ai.SpeechResult) -> notifyInstruction
    void notifyError(com.xiaomi.ai.SpeechEngine$ParamBuilder,com.xiaomi.ai.SpeechError) -> notifyError
    void notifyAsrParticalResults(com.xiaomi.ai.SpeechResult) -> notifyAsrParticalResults
    void notifyAsrEvent() -> notifyAsrEvent
    void notifyNlpResults(com.xiaomi.ai.SpeechResult) -> notifyNlpResults
    void notifyNlpError(com.xiaomi.ai.SpeechError) -> notifyNlpError
    void notifyTtsTransStart() -> notifyTtsTransStart
    void notifyTtsTransEnd(boolean) -> notifyTtsTransEnd
    void notifyTtsGotUrl(java.lang.String) -> notifyTtsGotUrl
    void notifyTtsPlayStart(android.media.AudioTrack) -> notifyTtsPlayStart
    void notifyTtsPlayFinish() -> notifyTtsPlayFinish
    void notifyTtsError(com.xiaomi.ai.SpeechError) -> notifyTtsError
    void notifyTtsPCMData(com.xiaomi.ai.PCMInfo) -> notifyTtsPCMData
    void setEnv(int) -> setEnv
    void setEnv(int,java.lang.String,java.lang.String) -> setEnv
    void setEnv(int,java.lang.String) -> setEnv
    void <clinit>() -> <clinit>
com.xiaomi.ai.SpeechEngine$1 -> com.xiaomi.ai.m:
    void <init>() -> <init>
    java.lang.String getOauthCode() -> getOauthCode
com.xiaomi.ai.SpeechEngine$2 -> com.xiaomi.ai.n:
    int[] $SwitchMap$com$xiaomi$ai$SpeechEngine$ProcessStage -> a
    void <clinit>() -> <clinit>
com.xiaomi.ai.SpeechEngine$ParamBuilder -> com.xiaomi.ai.SpeechEngine$ParamBuilder:
    boolean needAsr -> needAsr
    com.xiaomi.ai.AsrRequest asrRequest -> asrRequest
    boolean needNlp -> needNlp
    com.xiaomi.ai.NlpRequest nlpRequest -> nlpRequest
    boolean needTts -> needTts
    com.xiaomi.ai.TtsRequest ttsRequest -> ttsRequest
    com.xiaomi.ai.VoiceprintRegisterRequest voiceprintRegisterRequest -> voiceprintRegisterRequest
    boolean needVpReg -> needVpReg
    com.xiaomi.ai.VoiceprintRecognizeRequest voiceprintRecognizeRequest -> voiceprintRecognizeRequest
    com.xiaomi.ai.VoiceprintQueryRequest voiceprintQueryRequest -> voiceprintQueryRequest
    com.xiaomi.ai.VoiceprintDeleteRequest voiceprintDeleteRequest -> voiceprintDeleteRequest
    boolean needVpRec -> needVpRec
    boolean needVpDel -> needVpDel
    boolean needVpQry -> needVpQry
    boolean needEvent -> needEvent
    com.xiaomi.ai.EventRequest eventRequest -> eventRequest
    int EVENT_LEVEL_WARN -> EVENT_LEVEL_WARN
    int EVENT_LEVEL_INFO -> EVENT_LEVEL_INFO
    int EVENT_LEVEL_DEBUG -> EVENT_LEVEL_DEBUG
    int mEventLevel -> mEventLevel
    java.lang.String apiKey -> apiKey
    void <init>() -> <init>
    com.xiaomi.ai.SpeechEngine$ParamBuilder setEventLevel(int) -> setEventLevel
    com.xiaomi.ai.SpeechEngine$ParamBuilder setApiKey(java.lang.String) -> setApiKey
    com.xiaomi.ai.SpeechEngine$ParamBuilder needAsr() -> needAsr
    com.xiaomi.ai.SpeechEngine$ParamBuilder needAsr(boolean) -> needAsr
    com.xiaomi.ai.SpeechEngine$ParamBuilder setAsrRequest(com.xiaomi.ai.AsrRequest) -> setAsrRequest
    com.xiaomi.ai.SpeechEngine$ParamBuilder needNlp() -> needNlp
    com.xiaomi.ai.SpeechEngine$ParamBuilder needNlp(boolean) -> needNlp
    com.xiaomi.ai.SpeechEngine$ParamBuilder setNlpRequest(com.xiaomi.ai.NlpRequest) -> setNlpRequest
    com.xiaomi.ai.SpeechEngine$ParamBuilder needTts() -> needTts
    com.xiaomi.ai.SpeechEngine$ParamBuilder needTts(boolean) -> needTts
    com.xiaomi.ai.SpeechEngine$ParamBuilder setTtsRequest(com.xiaomi.ai.TtsRequest) -> setTtsRequest
    com.xiaomi.ai.SpeechEngine$ParamBuilder setEventRequest(com.xiaomi.ai.EventRequest) -> setEventRequest
    com.xiaomi.ai.SpeechEngine$ParamBuilder needEvent(boolean) -> needEvent
    com.xiaomi.ai.SpeechEngine$ParamBuilder needEvent() -> needEvent
com.xiaomi.ai.SpeechEngine$ProcessStage -> com.xiaomi.ai.SpeechEngine$ProcessStage:
    com.xiaomi.ai.SpeechEngine$ProcessStage STAGE_REQUESTING -> STAGE_REQUESTING
    com.xiaomi.ai.SpeechEngine$ProcessStage STAGE_ASR -> STAGE_ASR
    com.xiaomi.ai.SpeechEngine$ProcessStage STAGE_NLP -> STAGE_NLP
    com.xiaomi.ai.SpeechEngine$ProcessStage STAGE_TTS -> STAGE_TTS
    com.xiaomi.ai.SpeechEngine$ProcessStage STAGE_VP_REG -> STAGE_VP_REG
    com.xiaomi.ai.SpeechEngine$ProcessStage STAGE_VP -> STAGE_VP
    com.xiaomi.ai.SpeechEngine$ProcessStage STAGE_VP_DEL -> STAGE_VP_DEL
    com.xiaomi.ai.SpeechEngine$ProcessStage STAGE_VP_QRY -> STAGE_VP_QRY
    com.xiaomi.ai.SpeechEngine$ProcessStage STAGE_EVENT -> STAGE_EVENT
    com.xiaomi.ai.SpeechEngine$ProcessStage STAGE_INSTRUCTION -> STAGE_INSTRUCTION
    com.xiaomi.ai.SpeechEngine$ProcessStage STAGE_IDLE -> STAGE_IDLE
    com.xiaomi.ai.SpeechEngine$ProcessStage[] $VALUES -> $VALUES
    com.xiaomi.ai.SpeechEngine$ProcessStage[] values() -> values
    com.xiaomi.ai.SpeechEngine$ProcessStage valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.xiaomi.ai.SpeechEngine$ResultParser -> com.xiaomi.ai.SpeechEngine$ResultParser:
    void <init>() -> <init>
    com.xiaomi.ai.SpeechResult getNlpResult(org.json.JSONObject) -> getNlpResult
    com.xiaomi.ai.SpeechResult getAsrResult(org.json.JSONObject) -> getAsrResult
    com.xiaomi.ai.SpeechResult getVoiceRecResult(org.json.JSONObject) -> getVoiceRecResult
    com.xiaomi.ai.SpeechResult getVoiceRegResult(org.json.JSONObject) -> getVoiceRegResult
    com.xiaomi.ai.SpeechResult getVoiceDelResult(org.json.JSONObject) -> getVoiceDelResult
    com.xiaomi.ai.SpeechResult getVoiceQryResult(org.json.JSONObject) -> getVoiceQryResult
    com.xiaomi.ai.Instruction[] getInstruction(org.json.JSONObject) -> getInstruction
com.xiaomi.ai.SpeechError -> com.xiaomi.ai.SpeechError:
    int ERR_TYPE_ENGINE -> ERR_TYPE_ENGINE
    int ERR_TYPE_LOCAL -> ERR_TYPE_LOCAL
    int ERR_UNKNOWN -> ERR_UNKNOWN
    int ERR_LOCAL_JSON_PARSE -> ERR_LOCAL_JSON_PARSE
    int ERR_LCOAL_STAGE -> ERR_LCOAL_STAGE
    int ERR_LOCAL_TIME_OUT -> ERR_LOCAL_TIME_OUT
    int ERR_LOCAL_FAIL_TO_INIT_RECORDER -> ERR_LOCAL_FAIL_TO_INIT_RECORDER
    int ERR_LOCAL_BINARY_ERROR -> ERR_LOCAL_BINARY_ERROR
    int ERR_LOCAL_TTS_DOWNLOAD -> ERR_LOCAL_TTS_DOWNLOAD
    int ERR_LOCAL_RECORDING_ERROR -> ERR_LOCAL_RECORDING_ERROR
    int ERR_VAD_INIT_FAIL -> ERR_VAD_INIT_FAIL
    int ERR_RECORD_START_FAILED -> ERR_RECORD_START_FAILED
    int ERROR_ASR_NULL -> ERROR_ASR_NULL
    int ERR_LOCAL_NETWORK -> ERR_LOCAL_NETWORK
    int ERR_LOCAL_TTS_ENGINE -> ERR_LOCAL_TTS_ENGINE
    int ERR_LOCAL_TTS_INTERNAL -> ERR_LOCAL_TTS_INTERNAL
    int ERR_LOCAL_NATIVE_INIT_FAILED -> ERR_LOCAL_NATIVE_INIT_FAILED
    int ERR_LOCAL_NATIVE_UNINITIALED -> ERR_LOCAL_NATIVE_UNINITIALED
    int ERR_LOCAL_NATIVE_HAS_INITIALIZED -> ERR_LOCAL_NATIVE_HAS_INITIALIZED
    int ERR_LOCAL_NATIVE_MEM_FAILED -> ERR_LOCAL_NATIVE_MEM_FAILED
    int ERR_LOCAL_NATIVE_ENDED -> ERR_LOCAL_NATIVE_ENDED
    int ERR_LOCAL_NATIVE_PARAMS -> ERR_LOCAL_NATIVE_PARAMS
    int ERR_LOCAL_NATIVE_BUFFERQUEUE -> ERR_LOCAL_NATIVE_BUFFERQUEUE
    int ERR_LOCAL_NATIVE_UNKNOWN -> ERR_LOCAL_NATIVE_UNKNOWN
    int ERR_LOCAL_NATIVE_RECVDATA -> ERR_LOCAL_NATIVE_RECVDATA
    int ERR_LOCAL_NATIVE_TRANSMISSION_CONNECT_TIMEOUT -> ERR_LOCAL_NATIVE_TRANSMISSION_CONNECT_TIMEOUT
    int ERR_LOCAL_NATIVE_TRANSMISSION_READ_DATA_ERROR -> ERR_LOCAL_NATIVE_TRANSMISSION_READ_DATA_ERROR
    int ERR_LOCAL_NATIVE_TRANSMISSION_WRITE_DATA_ERROR -> ERR_LOCAL_NATIVE_TRANSMISSION_WRITE_DATA_ERROR
    int ERR_LOCAL_NATIVE_TRANSMISSION_HANDSHAKE_ERROR -> ERR_LOCAL_NATIVE_TRANSMISSION_HANDSHAKE_ERROR
    int ERR_LOCAL_NATIVE_TRANSMISSION_CRT_ERROR -> ERR_LOCAL_NATIVE_TRANSMISSION_CRT_ERROR
    int ERR_LOCAL_NATIVE_TRANSMISSION_NETWORK_ERROR -> ERR_LOCAL_NATIVE_TRANSMISSION_NETWORK_ERROR
    int ERR_LOCAL_NATIVE_TRANSMISSION_INIT_FAILED_ERROR -> ERR_LOCAL_NATIVE_TRANSMISSION_INIT_FAILED_ERROR
    int ERR_LOCAL_NATIVE_TRANSMISSION_INIT_STATE_ERROR -> ERR_LOCAL_NATIVE_TRANSMISSION_INIT_STATE_ERROR
    int ERR_LOCAL_NATIVE_TRANSMISSION_READ_DATA_TIMEOUT -> ERR_LOCAL_NATIVE_TRANSMISSION_READ_DATA_TIMEOUT
    int ERR_LOCAL_NATIVE_TRANSMISSION_WRITE_DATA_TIMEOUT -> ERR_LOCAL_NATIVE_TRANSMISSION_WRITE_DATA_TIMEOUT
    int ERR_LOCAL_NATIVE_TRANSMISSION_ACTIVE_TIMEOUT -> ERR_LOCAL_NATIVE_TRANSMISSION_ACTIVE_TIMEOUT
    int ERR_LOCAL_NATIVE_TRANSMISSION_SYSTEM_TIME_ERROR -> ERR_LOCAL_NATIVE_TRANSMISSION_SYSTEM_TIME_ERROR
    int ERR_LOCAL_NATIVE_TRANSMISSION_AUTH_FAILED -> ERR_LOCAL_NATIVE_TRANSMISSION_AUTH_FAILED
    int ERR_LOCAL_NATIVE_TRANSMISSION_GET_TOKEN_FAILED -> ERR_LOCAL_NATIVE_TRANSMISSION_GET_TOKEN_FAILED
    int ERR_ENGINE_INVALID_PARAMETER -> ERR_ENGINE_INVALID_PARAMETER
    int ERR_ENGINE_INVALID_INVALID_PARAM_END_WITHOUT_AUDIO -> ERR_ENGINE_INVALID_INVALID_PARAM_END_WITHOUT_AUDIO
    int ERR_ENGINE_EXECUTION_TIMEOUT -> ERR_ENGINE_EXECUTION_TIMEOUT
    int ERR_ENGINE_EXECUTION_ERROR -> ERR_ENGINE_EXECUTION_ERROR
    int ERR_ENGINE_SERVICE_TIMEOUT -> ERR_ENGINE_SERVICE_TIMEOUT
    com.xiaomi.ai.SpeechEngine$ProcessStage stage -> stage
    int errType -> errType
    int errCode -> errCode
    java.lang.String errMsg -> errMsg
    java.lang.String requestId -> requestId
    void <init>(com.xiaomi.ai.SpeechEngine$ProcessStage) -> <init>
    int getErrType() -> getErrType
    int getErrCode() -> getErrCode
    java.lang.String getErrMsg() -> getErrMsg
    java.lang.String toString() -> toString
com.xiaomi.ai.SpeechResult -> com.xiaomi.ai.SpeechResult:
    java.lang.String query -> query
    java.lang.String answerText -> answerText
    java.lang.String answer -> answer
    java.lang.String intention -> intention
    java.lang.String sessionId -> sessionId
    java.lang.String requestId -> requestId
    java.lang.String response -> response
    java.lang.String content -> content
    java.lang.String domain -> domain
    java.lang.String action -> action
    java.lang.String toSpeak -> toSpeak
    java.lang.String toDisplay -> toDisplay
    java.lang.String directive -> directive
    boolean openMic -> openMic
    int unknownDomainAction -> unknownDomainAction
    boolean regSuccess -> regSuccess
    boolean isRegFinal -> isRegFinal
    java.lang.String voiceUserId -> voiceUserId
    boolean deleteSuccess -> deleteSuccess
    java.util.List voiceUserIds -> voiceUserIds
    java.lang.String extraMessage -> extraMessage
    int vadIdle -> vadIdle
    int displayDuration -> displayDuration
    void <init>() -> <init>
    int getVadIdle() -> getVadIdle
    int getDisplayDuration() -> getDisplayDuration
    java.lang.String getQuery() -> getQuery
    java.lang.String getAnswerText() -> getAnswerText
    java.lang.String getResponse() -> getResponse
    java.lang.String getDomain() -> getDomain
    java.lang.String getContent() -> getContent
    java.lang.String getAction() -> getAction
    java.lang.String getAnswer() -> getAnswer
    java.lang.String getIntention() -> getIntention
    java.lang.String getToSpeak() -> getToSpeak
    java.lang.String getToDisplay() -> getToDisplay
    java.lang.String getDirective() -> getDirective
    boolean isOpenMic() -> isOpenMic
    int getUnknownDomainAction() -> getUnknownDomainAction
    java.lang.String getSessionId() -> getSessionId
    java.lang.String getVoiceprintRecognizedUserId() -> getVoiceprintRecognizedUserId
    java.util.List getVoiceprintQueryUserIds() -> getVoiceprintQueryUserIds
    boolean isVoiceprintRecognierSuccess() -> isVoiceprintRecognierSuccess
    boolean isVoiceprintDeleteSuccess() -> isVoiceprintDeleteSuccess
    boolean isVoiceprintRegFinal() -> isVoiceprintRegFinal
    java.lang.String getRequestId() -> getRequestId
    java.lang.String getExtraMessage() -> getExtraMessage
com.xiaomi.ai.SpeechResultParser -> com.xiaomi.ai.o:
    void <init>() -> <init>
    com.xiaomi.ai.SpeechResult getNlpResult(org.json.JSONObject) -> getNlpResult
    com.xiaomi.ai.SpeechResult getAsrResult(org.json.JSONObject) -> getAsrResult
    com.xiaomi.ai.Instruction[] getInstruction(org.json.JSONObject) -> getInstruction
    com.xiaomi.ai.SpeechResult getVoiceRecResult(org.json.JSONObject) -> getVoiceRecResult
    com.xiaomi.ai.SpeechResult getVoiceRegResult(org.json.JSONObject) -> getVoiceRegResult
    com.xiaomi.ai.SpeechResult getVoiceDelResult(org.json.JSONObject) -> getVoiceDelResult
    com.xiaomi.ai.SpeechResult getVoiceQryResult(org.json.JSONObject) -> getVoiceQryResult
com.xiaomi.ai.TrackInfo -> com.xiaomi.ai.TrackInfo:
    int TRACK_ACTION_TYPE_PAUSE -> TRACK_ACTION_TYPE_PAUSE
    int TRACK_ACTION_TYPE_MANUAL_SWITCH -> TRACK_ACTION_TYPE_MANUAL_SWITCH
    int TRACK_ACTION_TYPE_AUTO_SWITCH -> TRACK_ACTION_TYPE_AUTO_SWITCH
    int TRACK_ACTION_TYPE_LIST_SWITCH -> TRACK_ACTION_TYPE_LIST_SWITCH
    int TRACK_ACTION_TYPE_LOAD_RESOURCE -> TRACK_ACTION_TYPE_LOAD_RESOURCE
    java.lang.String mRequestID -> mRequestID
    java.lang.String mResourceID -> mResourceID
    java.lang.String mAlbumID -> mAlbumID
    int mEpisode -> mEpisode
    java.lang.String mCP -> mCP
    java.lang.String mDomain -> mDomain
    int mActionType -> mActionType
    long mLoadTime -> mLoadTime
    boolean mIsSucceed -> mIsSucceed
    long mTimestamp -> mTimestamp
    long mStartTime -> mStartTime
    long mEndTime -> mEndTime
    long mPosition -> mPosition
    int mOffset -> mOffset
    void <init>() -> <init>
    java.lang.String getRequestID() -> getRequestID
    java.lang.String getResourceID() -> getResourceID
    java.lang.String getAlbumID() -> getAlbumID
    int getEpisode() -> getEpisode
    java.lang.String getCP() -> getCP
    java.lang.String getDomain() -> getDomain
    int getActionType() -> getActionType
    long getLoadTime() -> getLoadTime
    boolean isSucceed() -> isSucceed
    long getTimestamp() -> getTimestamp
    long getStartTime() -> getStartTime
    long getEndTime() -> getEndTime
    long getPosition() -> getPosition
    int getOffset() -> getOffset
    com.xiaomi.ai.TrackInfo setRequestID(java.lang.String) -> setRequestID
    com.xiaomi.ai.TrackInfo setResourceID(java.lang.String) -> setResourceID
    com.xiaomi.ai.TrackInfo setAlbumID(java.lang.String) -> setAlbumID
    com.xiaomi.ai.TrackInfo setEpisode(int) -> setEpisode
    com.xiaomi.ai.TrackInfo setCP(java.lang.String) -> setCP
    com.xiaomi.ai.TrackInfo setDomain(java.lang.String) -> setDomain
    com.xiaomi.ai.TrackInfo setActionType(int) -> setActionType
    com.xiaomi.ai.TrackInfo setLoadTime(long) -> setLoadTime
    com.xiaomi.ai.TrackInfo setIsSucceed(boolean) -> setIsSucceed
    com.xiaomi.ai.TrackInfo setTimestamp(long) -> setTimestamp
    com.xiaomi.ai.TrackInfo setStartTime(long) -> setStartTime
    com.xiaomi.ai.TrackInfo setEndTime(long) -> setEndTime
    com.xiaomi.ai.TrackInfo setPosition(long) -> setPosition
    com.xiaomi.ai.TrackInfo setOffset(int) -> setOffset
com.xiaomi.ai.TtsListener -> com.xiaomi.ai.TtsListener:
    void onTtsTransStart() -> onTtsTransStart
    void onTtsTransEnd(boolean) -> onTtsTransEnd
    void onPlayStart(android.media.AudioTrack) -> onPlayStart
    void onPlayFinish() -> onPlayFinish
    void onError(com.xiaomi.ai.SpeechError) -> onError
    void onPCMData(com.xiaomi.ai.PCMInfo) -> onPCMData
    void onTtsGotURL(java.lang.String) -> onTtsGotURL
com.xiaomi.ai.TtsRequest -> com.xiaomi.ai.TtsRequest:
    java.lang.String textToSpeak -> a
    int timeout -> b
    java.lang.String vendorStr -> vendorStr
    int ttsSpeed -> c
    int ttsVolume -> d
    int ttsTone -> e
    boolean ttsAsFileUrl -> f
    java.lang.String lang -> g
    void <init>() -> <init>
    void setTtsLang(java.lang.String) -> setTtsLang
    void setTtsSpeed(int) -> setTtsSpeed
    void setTtsVolume(int) -> setTtsVolume
    void setTtsTone(int) -> setTtsTone
    void setTimeout(int) -> setTimeout
    void setTtsAsFileUrl(boolean) -> setTtsAsFileUrl
    java.lang.String getVendorStr() -> a
    void setTextToSpeak(java.lang.String) -> setTextToSpeak
    java.lang.String getTextToSpeak() -> getTextToSpeak
com.xiaomi.ai.VoiceprintDeleteListener -> com.xiaomi.ai.VoiceprintDeleteListener:
    void onResults(com.xiaomi.ai.SpeechResult) -> onResults
    void onError(com.xiaomi.ai.SpeechError) -> onError
com.xiaomi.ai.VoiceprintDeleteRequest -> com.xiaomi.ai.VoiceprintDeleteRequest:
    java.lang.String family -> family
    org.json.JSONArray ids -> ids
    java.lang.String vendorStr -> vendorStr
    void <init>() -> <init>
    void setFamily(java.lang.String) -> setFamily
    void addUserId(java.lang.String) -> addUserId
com.xiaomi.ai.VoiceprintQueryListener -> com.xiaomi.ai.VoiceprintQueryListener:
    void onResults(com.xiaomi.ai.SpeechResult) -> onResults
    void onError(com.xiaomi.ai.SpeechError) -> onError
com.xiaomi.ai.VoiceprintQueryRequest -> com.xiaomi.ai.VoiceprintQueryRequest:
    java.lang.String family -> family
    java.lang.String vendorStr -> vendorStr
    void <init>() -> <init>
    void setFamily(java.lang.String) -> setFamily
com.xiaomi.ai.VoiceprintRecognizeListener -> com.xiaomi.ai.VoiceprintRecognizeListener:
    void onBeginningOfDataInput() -> onBeginningOfDataInput
    void onBufferReceived(byte[]) -> onBufferReceived
    void onEndOfDataInput() -> onEndOfDataInput
    void onRmsChanged(float) -> onRmsChanged
    void onResults(com.xiaomi.ai.SpeechResult) -> onResults
    void onError(com.xiaomi.ai.SpeechError) -> onError
com.xiaomi.ai.VoiceprintRecognizeRequest -> com.xiaomi.ai.VoiceprintRecognizeRequest:
    java.lang.String family -> family
    com.xiaomi.ai.VoiceprintRecognizeRequest$DataInputMode mode -> mode
    org.json.JSONArray queries -> queries
    java.lang.String id -> id
    java.lang.String vendorStr -> vendorStr
    void <init>() -> <init>
    void setFamilyId(java.lang.String) -> setFamilyId
    void setDataInputMode(com.xiaomi.ai.VoiceprintRecognizeRequest$DataInputMode) -> setDataInputMode
    void addQueryText(java.lang.String) -> addQueryText
    void setUserId(java.lang.String) -> setUserId
com.xiaomi.ai.VoiceprintRecognizeRequest$DataInputMode -> com.xiaomi.ai.VoiceprintRecognizeRequest$DataInputMode:
    com.xiaomi.ai.VoiceprintRecognizeRequest$DataInputMode DATA_INPUT_MODE_RECORDER -> DATA_INPUT_MODE_RECORDER
    com.xiaomi.ai.VoiceprintRecognizeRequest$DataInputMode DATA_INPUT_MODE_BUFFER -> DATA_INPUT_MODE_BUFFER
    com.xiaomi.ai.VoiceprintRecognizeRequest$DataInputMode[] $VALUES -> $VALUES
    com.xiaomi.ai.VoiceprintRecognizeRequest$DataInputMode[] values() -> values
    com.xiaomi.ai.VoiceprintRecognizeRequest$DataInputMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.xiaomi.ai.VoiceprintRegisterListener -> com.xiaomi.ai.VoiceprintRegisterListener:
    void onBeginningOfDataInput() -> onBeginningOfDataInput
    void onBufferReceived(byte[]) -> onBufferReceived
    void onRmsChanged(float) -> onRmsChanged
    void onEndOfDataInput() -> onEndOfDataInput
    void onResults(com.xiaomi.ai.SpeechResult) -> onResults
    void onError(com.xiaomi.ai.SpeechError) -> onError
com.xiaomi.ai.VoiceprintRegisterRequest -> com.xiaomi.ai.VoiceprintRegisterRequest:
    java.lang.String userId -> userId
    java.lang.String family -> family
    com.xiaomi.ai.VoiceprintRegisterRequest$DataInputMode mode -> mode
    org.json.JSONArray queries -> queries
    java.lang.String vendorStr -> vendorStr
    int voiceId -> voiceId
    int disableTextDependent -> disableTextDependent
    void <init>() -> <init>
    void setUserId(java.lang.String) -> setUserId
    void setFamilyId(java.lang.String) -> setFamilyId
    void setDataInputMode(com.xiaomi.ai.VoiceprintRegisterRequest$DataInputMode) -> setDataInputMode
    void addQueryText(java.lang.String) -> addQueryText
    void setVoiceId(int) -> setVoiceId
    void setVoiceprintDisableTextDependent(int) -> setVoiceprintDisableTextDependent
com.xiaomi.ai.VoiceprintRegisterRequest$DataInputMode -> com.xiaomi.ai.VoiceprintRegisterRequest$DataInputMode:
    com.xiaomi.ai.VoiceprintRegisterRequest$DataInputMode DATA_INPUT_MODE_RECORDER -> DATA_INPUT_MODE_RECORDER
    com.xiaomi.ai.VoiceprintRegisterRequest$DataInputMode DATA_INPUT_MODE_BUFFER -> DATA_INPUT_MODE_BUFFER
    com.xiaomi.ai.VoiceprintRegisterRequest$DataInputMode[] $VALUES -> $VALUES
    com.xiaomi.ai.VoiceprintRegisterRequest$DataInputMode[] values() -> values
    com.xiaomi.ai.VoiceprintRegisterRequest$DataInputMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.xiaomi.ai.streamplayer.Decoder -> com.xiaomi.ai.streamplayer.a:
    void <init>() -> <init>
    void start() -> a
    void release() -> b
    void putEncodedBuffer(byte[],int,int) -> a
    void cancel() -> c
    void end() -> d
    com.xiaomi.ai.streamplayer.Decoder$PcmInfo getDecodedBuffer() -> e
com.xiaomi.ai.streamplayer.Decoder$PcmInfo -> com.xiaomi.ai.streamplayer.a$a:
    int sample_rate -> a
    int chinels -> b
    int bit -> c
    boolean eof -> d
    byte[] pcm -> e
    void <init>() -> <init>
    boolean paramsIsSame(com.xiaomi.ai.streamplayer.Decoder$PcmInfo) -> a
com.xiaomi.ai.streamplayer.Mp3FrameParser -> com.xiaomi.ai.streamplayer.b:
    java.lang.String TAG -> a
    java.lang.String LAY_1 -> e
    java.lang.String LAY_2 -> f
    java.lang.String LAY_3 -> g
    java.lang.String MPEG_2D5 -> h
    java.lang.String MPEG_2 -> i
    java.lang.String MPEG1 -> j
    java.lang.String MPEG_UNKNOW -> k
    java.lang.String CHECK_BIT_1 -> l
    java.lang.String CHECK_BIT_0 -> m
    java.lang.String LAY_UNKNOW -> n
    char BIT_1 -> o
    char BIT_0 -> p
    int CHANEL_SINGLE -> q
    int CHANEL_DOUBLE -> r
    int CHANEL_OTHER -> s
    java.util.HashMap sBitRateMap -> t
    java.util.HashMap sSampleRateCountMap -> u
    java.lang.Thread mThread -> v
    void <init>() -> <init>
    void start() -> a
    void stop() -> b
    void doParserFrame() -> d
    java.lang.String createKey(java.lang.String,java.lang.String,char[],int,int) -> a
    boolean checkSync(char[]) -> a
    int getChanelCount(char[]) -> b
    char[] parserToChars(byte[]) -> a
    int getSampleRateCount(char[]) -> c
    int getBitRate(char[]) -> d
    int getFrameSize(char[]) -> e
    int getSampleRate(char[]) -> f
    java.lang.String byte2bits(byte) -> a
    java.lang.String getLayer(char[]) -> g
    java.lang.String getCheckBit(char[]) -> h
    java.lang.String getMpeg(char[]) -> i
    char[] getBinaryString(byte[]) -> b
    void access$000(com.xiaomi.ai.streamplayer.Mp3FrameParser) -> a
    void <clinit>() -> <clinit>
com.xiaomi.ai.streamplayer.Mp3FrameParser$1 -> com.xiaomi.ai.streamplayer.c:
    com.xiaomi.ai.streamplayer.Mp3FrameParser this$0 -> a
    void <init>(com.xiaomi.ai.streamplayer.Mp3FrameParser) -> <init>
    void run() -> run
com.xiaomi.ai.streamplayer.Mp3FrameParser$MP3HeadMsg -> com.xiaomi.ai.streamplayer.b$a:
    java.lang.String layer -> a
    java.lang.String mpeg -> b
    int sampleRate -> c
    int bitrate -> d
    int sampleRateCount -> e
    int frameSize -> f
    int channel -> g
    void <init>() -> <init>
    java.lang.String toString() -> toString
    boolean isNormal() -> a
com.xiaomi.ai.streamplayer.Mp3HardDecoder -> com.xiaomi.ai.streamplayer.d:
    java.io.PipedOutputStream mOs -> a
    java.io.PipedInputStream mIs -> b
    com.xiaomi.ai.streamplayer.StreamParser mStreamParser -> c
    boolean mIsCanceled -> d
    java.lang.String TAG -> e
    android.media.MediaCodec mMediaCodec -> f
    java.lang.String MEDIA_DECODER_NAME -> g
    void <init>() -> <init>
    void start() -> a
    void release() -> b
    void putBuffer(byte[]) -> a
    void putEofMsg() -> f
    void end() -> d
    void putEncodedBuffer(byte[],int,int) -> a
    void cancel() -> c
    com.xiaomi.ai.streamplayer.Decoder$PcmInfo getDecodedBuffer() -> e
    boolean access$100(com.xiaomi.ai.streamplayer.Mp3HardDecoder) -> a
com.xiaomi.ai.streamplayer.Mp3HardDecoder$1 -> com.xiaomi.ai.streamplayer.e:
com.xiaomi.ai.streamplayer.Mp3HardDecoder$Mp3StreamListener -> com.xiaomi.ai.streamplayer.d$a:
    boolean dataExists -> b
    com.xiaomi.ai.streamplayer.Mp3HardDecoder this$0 -> a
    void <init>(com.xiaomi.ai.streamplayer.Mp3HardDecoder) -> <init>
    void onStart(com.xiaomi.ai.streamplayer.StreamParser) -> a
    void onData(com.xiaomi.ai.streamplayer.StreamParser,java.lang.Object,byte[]) -> a
    void onEnd(com.xiaomi.ai.streamplayer.StreamParser) -> b
    void onError(com.xiaomi.ai.streamplayer.StreamParser,java.lang.String) -> a
    void <init>(com.xiaomi.ai.streamplayer.Mp3HardDecoder,com.xiaomi.ai.streamplayer.Mp3HardDecoder$1) -> <init>
com.xiaomi.ai.streamplayer.Mp3SoftDecoder -> com.xiaomi.ai.streamplayer.f:
    java.lang.String TAG -> a
    com.xiaomi.ai.mibrain.MibrainMp3Decoder mibrainMp3Decoder -> b
    java.io.PipedInputStream mRawDataPipedInputStream -> c
    java.io.PipedOutputStream mRawDataPipedOutputStream -> d
    java.util.concurrent.BlockingQueue blockingQueue -> e
    boolean mIsRelease -> f
    java.lang.Thread mThread -> g
    void <init>() -> <init>
    void doWork() -> f
    void start() -> a
    void release() -> b
    void putEncodedBuffer(byte[],int,int) -> a
    com.xiaomi.ai.streamplayer.Decoder$PcmInfo getDecodedBuffer() -> e
    void cancel() -> c
    void write(byte[],int) -> a
    void end() -> d
    java.io.PipedInputStream access$000(com.xiaomi.ai.streamplayer.Mp3SoftDecoder) -> a
    java.util.concurrent.BlockingQueue access$100(com.xiaomi.ai.streamplayer.Mp3SoftDecoder) -> b
    com.xiaomi.ai.mibrain.MibrainMp3Decoder access$200(com.xiaomi.ai.streamplayer.Mp3SoftDecoder) -> c
    boolean access$302(com.xiaomi.ai.streamplayer.Mp3SoftDecoder,boolean) -> a
com.xiaomi.ai.streamplayer.Mp3SoftDecoder$1 -> com.xiaomi.ai.streamplayer.g:
    com.xiaomi.ai.streamplayer.Mp3SoftDecoder this$0 -> a
    void <init>(com.xiaomi.ai.streamplayer.Mp3SoftDecoder) -> <init>
    int read(byte[],int) -> read
    int write(byte[],int,com.xiaomi.ai.mibrain.MibrainDecoder$AudioInfo) -> write
com.xiaomi.ai.streamplayer.Mp3SoftDecoder$2 -> com.xiaomi.ai.streamplayer.h:
    com.xiaomi.ai.streamplayer.Mp3SoftDecoder this$0 -> a
    void <init>(com.xiaomi.ai.streamplayer.Mp3SoftDecoder) -> <init>
    void run() -> run
com.xiaomi.ai.streamplayer.StreamParser -> com.xiaomi.ai.streamplayer.i:
    com.xiaomi.ai.streamplayer.StreamParserListener mStreamParserListener -> b
    java.io.PipedInputStream mPipedInputStream -> c
    boolean mIsBreak -> d
    void <init>() -> <init>
    void setPipedInputStream(java.io.PipedInputStream) -> a
    void start() -> a
    void stop() -> b
    void setStreamParserListener(com.xiaomi.ai.streamplayer.StreamParserListener) -> a
    boolean isBreak() -> c
com.xiaomi.ai.streamplayer.StreamParserListener -> com.xiaomi.ai.streamplayer.j:
    void onStart(com.xiaomi.ai.streamplayer.StreamParser) -> a
    void onData(com.xiaomi.ai.streamplayer.StreamParser,java.lang.Object,byte[]) -> a
    void onEnd(com.xiaomi.ai.streamplayer.StreamParser) -> b
    void onError(com.xiaomi.ai.streamplayer.StreamParser,java.lang.String) -> a
com.xiaomi.ai.streamplayer.StreamingPlayer -> com.xiaomi.ai.streamplayer.k:
    java.lang.String TAG -> a
    boolean mIsCanceled -> b
    int STATE_INIT -> c
    int STATE_PREPARED -> d
    int STATE_STARTED -> e
    int STATE_END -> f
    int mState -> g
    com.xiaomi.ai.streamplayer.StreamingPlayer$PlayListener mPlayListener -> h
    com.xiaomi.ai.streamplayer.StreamingPlayer$StreamPlayThread mStreamPlayThread -> i
    com.xiaomi.ai.streamplayer.Decoder mDecoder -> j
    int mStreamType -> k
    int mTTSMode -> l
    void <init>(int) -> <init>
    void setPlayListener(com.xiaomi.ai.streamplayer.StreamingPlayer$PlayListener) -> a
    void setPlayMode(int) -> a
    void write(byte[],int,int) -> a
    void prepareAudio(java.lang.String) -> a
    void start() -> a
    void end() -> b
    void cancel() -> c
    int access$200(com.xiaomi.ai.streamplayer.StreamingPlayer) -> a
    com.xiaomi.ai.streamplayer.StreamingPlayer$PlayListener access$300(com.xiaomi.ai.streamplayer.StreamingPlayer) -> b
    int access$400(com.xiaomi.ai.streamplayer.StreamingPlayer) -> c
    boolean access$500(com.xiaomi.ai.streamplayer.StreamingPlayer) -> d
    com.xiaomi.ai.streamplayer.Decoder access$600(com.xiaomi.ai.streamplayer.StreamingPlayer) -> e
com.xiaomi.ai.streamplayer.StreamingPlayer$1 -> com.xiaomi.ai.streamplayer.l:
com.xiaomi.ai.streamplayer.StreamingPlayer$PlayListener -> com.xiaomi.ai.streamplayer.k$a:
    void onPlayStart(com.xiaomi.ai.streamplayer.StreamingPlayer,android.media.AudioTrack) -> a
    void onError(com.xiaomi.ai.streamplayer.StreamingPlayer,int,java.lang.String) -> a
    void onPlayFinish(com.xiaomi.ai.streamplayer.StreamingPlayer) -> a
    void onGetPCM(com.xiaomi.ai.streamplayer.StreamingPlayer,com.xiaomi.ai.PCMInfo) -> a
com.xiaomi.ai.streamplayer.StreamingPlayer$StreamPlayThread -> com.xiaomi.ai.streamplayer.k$b:
    int MAX_END_POINTS -> a
    int lastPlayBckPosition -> b
    int end_points -> c
    android.media.AudioTrack mAudioTrack -> e
    com.xiaomi.ai.streamplayer.StreamingPlayer this$0 -> d
    void <init>(com.xiaomi.ai.streamplayer.StreamingPlayer) -> <init>
    boolean initAudioTrack(int,int) -> a
    void releaseAudioTrack() -> a
    void cancel() -> b
    void writeAudio(byte[]) -> a
    void flashAudio() -> c
    void start() -> start
    void run() -> run
    void <init>(com.xiaomi.ai.streamplayer.StreamingPlayer,com.xiaomi.ai.streamplayer.StreamingPlayer$1) -> <init>
    void access$100(com.xiaomi.ai.streamplayer.StreamingPlayer$StreamPlayThread) -> a
com.xiaomi.ai.streamplayer.TTSDecoderConfig -> com.xiaomi.ai.streamplayer.TTSDecoderConfig:
    boolean sUseHardDecoder -> sUseHardDecoder
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    void setTTSDecoderConfig(boolean) -> setTTSDecoderConfig
    void <clinit>() -> <clinit>
com.xiaomi.ai.utils.DebugUtils -> com.xiaomi.ai.utils.DebugUtils:
    java.lang.String ROOT -> ROOT
    java.lang.String DEBUG_INDICATOR_FILE -> DEBUG_INDICATOR_FILE
    void <init>() -> <init>
    boolean isDebugOn() -> isDebugOn
    void extractDBToSdcard() -> extractDBToSdcard
    void <clinit>() -> <clinit>
com.xiaomi.ai.utils.DeviceUtils -> com.xiaomi.ai.utils.DeviceUtils:
    void <init>() -> <init>
    java.lang.String getDefaultState(android.content.Context) -> getDefaultState
    java.lang.String getDeviceId(android.content.Context) -> getDeviceId
    java.lang.String getDefaultState(java.lang.String) -> getDefaultState
com.xiaomi.ai.utils.JsonUtils -> com.xiaomi.ai.utils.a:
    void <init>() -> <init>
    java.lang.String format(java.lang.String) -> a
    java.lang.String getLevelStr(int) -> a
com.xiaomi.ai.utils.LocationUtils -> com.xiaomi.ai.utils.b:
    java.lang.String TAG -> a
    void <init>() -> <init>
    android.location.Location getLocation(android.content.Context) -> a
com.xiaomi.ai.utils.LocationUtils$1 -> com.xiaomi.ai.utils.c:
    void <init>() -> <init>
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
com.xiaomi.ai.utils.Log -> com.xiaomi.ai.utils.Log:
    int MAX_LOG_FILE_SIZE_IN_BYTE -> MAX_LOG_FILE_SIZE_IN_BYTE
    int MAX_LOG_FILE_COUNT -> MAX_LOG_FILE_COUNT
    boolean sLogToFile -> sLogToFile
    boolean sInitialized -> sInitialized
    com.xiaomi.ai.mibrain.Mibrainsdk$MibrainsdkLogHook sLogHook -> sLogHook
    com.xiaomi.ai.utils.Log$ExternalLogHook sExternalLogHook -> sExternalLogHook
    void <init>() -> <init>
    void setLogToFile(boolean) -> setLogToFile
    void init(android.content.Context) -> init
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> e
    void e(java.lang.String,java.lang.String) -> e
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> w
    void w(java.lang.String,java.lang.String) -> w
    void i(java.lang.String,java.lang.String,java.lang.Throwable) -> i
    void i(java.lang.String,java.lang.String) -> i
    void d(java.lang.String,java.lang.String,java.lang.Throwable) -> d
    void d(java.lang.String,java.lang.String) -> d
    void v(java.lang.String,java.lang.String,java.lang.Throwable) -> v
    void v(java.lang.String,java.lang.String) -> v
    void setJNILogHook(boolean) -> setJNILogHook
    boolean injectLog(int,java.lang.String,java.lang.String,java.lang.Throwable) -> injectLog
    void setExternalLogHook(com.xiaomi.ai.utils.Log$ExternalLogHook) -> setExternalLogHook
    void <clinit>() -> <clinit>
com.xiaomi.ai.utils.Log$1 -> com.xiaomi.ai.utils.d:
    void <init>() -> <init>
    void onLog(int,java.lang.String) -> onLog
com.xiaomi.ai.utils.Log$ExternalLogHook -> com.xiaomi.ai.utils.Log$ExternalLogHook:
    void onLog(int,java.lang.String,java.lang.String,java.lang.Throwable) -> onLog
com.xiaomi.ai.utils.MemoryUtils -> com.xiaomi.ai.utils.e:
    java.lang.String TAG -> a
    void <init>() -> <init>
    byte[] toByteArray(short[],int) -> a
    short[] toShortArray(byte[],int) -> a
com.xiaomi.ai.utils.NetworkUtils -> com.xiaomi.ai.utils.f:
    void <init>() -> <init>
    boolean isNetworkAvailable(android.content.Context) -> a
    java.lang.String getDate() -> a
    java.lang.String doHTTPPost(com.xiaomi.ai.HTTPCallback,java.lang.String,java.util.Map,java.lang.String) -> a
com.xiaomi.ai.utils.PackageUtils -> com.xiaomi.ai.utils.g:
    android.content.pm.PackageManager mPackageManager -> a
    java.lang.String mPackageName -> b
    java.lang.String mSignMD5 -> c
    java.lang.String mSignSHA1 -> d
    java.lang.String mSignSHA256 -> e
    java.lang.String getPackageName() -> a
    java.lang.String getCertMD5() -> b
    java.lang.String getCertSHA256() -> c
    java.lang.String getFormattedString() -> d
    void <init>(android.content.Context) -> <init>
    java.lang.String digest(java.lang.String,byte[]) -> a
    java.lang.String byte2HexFormatted(byte[]) -> a
com.xiaomi.ai.utils.SpannableUtils -> com.xiaomi.ai.utils.h:
    void <init>() -> <init>
    java.lang.CharSequence makeBold(java.lang.String) -> a
    java.lang.CharSequence makeColor(java.lang.String,int) -> a
com.xiaomi.ai.utils.SwitchFileLogSender -> com.xiaomi.ai.utils.i:
    java.lang.String PACKAGE_LOG_PATH -> a
    java.lang.String LOG_SUFFIX -> b
    java.lang.String mPackageName -> c
    com.xiaomi.ai.utils.XLogger$LogSender mParentLogSender -> d
    java.io.File mBasePath -> e
    int mMaxFileSizeInByte -> f
    int mMaxFileCount -> g
    long mSizeUsed -> h
    java.io.FileOutputStream mOutputStream -> i
    boolean mShutdown -> j
    void <init>(android.content.Context,java.lang.String,int,int,com.xiaomi.ai.utils.XLogger$LogSender) -> <init>
    void <init>(android.content.Context,java.io.File,int,int,com.xiaomi.ai.utils.XLogger$LogSender) -> <init>
    void registerShutdownListener(android.content.Context) -> a
    void sendLog(int,java.lang.String,java.lang.String) -> a
    boolean onFilterLogByLevelLocked(int) -> a
    java.lang.String onGetLevelTagLocked(int) -> b
    void onShutDown() -> a
    void switchFileLocked() -> b
    void access$000(com.xiaomi.ai.utils.SwitchFileLogSender) -> a
com.xiaomi.ai.utils.SwitchFileLogSender$1 -> com.xiaomi.ai.utils.j:
    com.xiaomi.ai.utils.SwitchFileLogSender this$0 -> a
    void <init>(com.xiaomi.ai.utils.SwitchFileLogSender) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.xiaomi.ai.utils.TrackUtils -> com.xiaomi.ai.utils.k:
    java.lang.String TRACK_URL_V1 -> a
    java.lang.String TRACK_URL_MIOT -> b
    java.lang.String mClientID -> c
    java.lang.String mDeviceID -> d
    com.xiaomi.ai.HTTPCallback mHTTPCallback -> e
    int mEnv -> f
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getURL(int,int) -> a
    void setEnv(int) -> a
    void setHTTPCallback(com.xiaomi.ai.HTTPCallback) -> a
    com.xiaomi.ai.HTTPCallback getHTTPCallback() -> a
    int asyncUploadTrackMessage(com.xiaomi.ai.HTTPCallback,com.xiaomi.ai.TrackInfo,java.lang.String,java.lang.String,java.lang.String,int) -> a
    java.lang.String generateTrackJSON(com.xiaomi.ai.TrackInfo,java.lang.String,java.lang.String) -> a
    org.json.JSONObject generatePlayTrackJSON(com.xiaomi.ai.TrackInfo) -> a
    org.json.JSONObject generateLoadTrackJSON(com.xiaomi.ai.TrackInfo) -> b
com.xiaomi.ai.utils.TrackUtils$1 -> com.xiaomi.ai.utils.l:
    com.xiaomi.ai.HTTPCallback val$cb -> a
    java.lang.String val$url -> b
    java.util.Map val$headers -> c
    java.lang.String val$body -> d
    com.xiaomi.ai.utils.TrackUtils this$0 -> e
    void <init>(com.xiaomi.ai.utils.TrackUtils,com.xiaomi.ai.HTTPCallback,java.lang.String,java.util.Map,java.lang.String) -> <init>
    void run() -> run
com.xiaomi.ai.utils.VoiceRecognizeUtils -> com.xiaomi.ai.utils.m:
    java.lang.String TAG -> a
    java.lang.String XML_NAME -> b
    java.lang.String ID_KEY -> c
    void <init>() -> <init>
    java.lang.String getMD5(java.lang.String) -> a
    void saveDeviceId(android.content.Context,java.lang.String) -> a
    java.lang.String readDeviceId(android.content.Context) -> c
    java.lang.String getDeviceId(android.content.Context) -> a
    java.lang.String getIPAddress() -> a
    java.lang.String getNetworkMacAddress() -> b
    java.lang.String loadFileAsString(java.lang.String) -> c
    java.lang.String loadReaderAsString(java.io.Reader) -> a
    java.lang.String getBluetoothMacAddress() -> c
    java.lang.String getTelephonyDeviceId(android.content.Context) -> b
    float calVoiceRms(byte[],int) -> a
    java.lang.String getScopeData(java.lang.String) -> b
    void <clinit>() -> <clinit>
com.xiaomi.ai.utils.WaveMaker -> com.xiaomi.ai.utils.WaveMaker:
    void <init>() -> <init>
    void convertToWaveFile(long,int,java.lang.String,java.lang.String) -> convertToWaveFile
    void convertToWaveFile(long,int,long,java.io.InputStream,java.lang.String) -> convertToWaveFile
    void convertToWaveFile(long,int,long,java.io.InputStream,java.io.OutputStream) -> convertToWaveFile
    void fixHeaderLength(java.io.File) -> fixHeaderLength
    void writeWaveFileHeader(java.io.OutputStream,long,long,int,long) -> writeWaveFileHeader
com.xiaomi.ai.utils.XLogger -> com.xiaomi.ai.utils.n:
    java.lang.String sClassTag -> b
    com.xiaomi.ai.utils.XLogger$LogSender sLogSender -> c
    com.xiaomi.ai.utils.XLogger$LogSender sDefaultLogSender -> a
    int sDefLogLevel -> d
    void <init>() -> <init>
    void logAtLevel(int,java.lang.String,java.lang.Object[]) -> a
    void log(java.lang.String,java.lang.Object[]) -> a
    java.lang.String group(java.lang.String,java.lang.Object[]) -> b
    void setDefLogLevel(int) -> a
    void setLogSender(com.xiaomi.ai.utils.XLogger$LogSender) -> a
    com.xiaomi.ai.utils.XLogger$LogSender getLogSender() -> a
    com.xiaomi.ai.utils.XLogger$LogSender getDefaultLogSender() -> b
    java.lang.String getObjectString(java.lang.Object) -> a
    java.lang.String getCrashMessage(java.lang.Throwable) -> a
    java.lang.String dumpStackTrace(java.lang.Throwable) -> b
    java.lang.String getCallerInfo() -> c
    void <clinit>() -> <clinit>
com.xiaomi.ai.utils.XLogger$1 -> com.xiaomi.ai.utils.o:
    boolean sLogOnAdb -> a
    void <init>() -> <init>
    void sendLog(int,java.lang.String,java.lang.String) -> a
com.xiaomi.ai.utils.XLogger$LogSender -> com.xiaomi.ai.utils.n$a:
    void sendLog(int,java.lang.String,java.lang.String) -> a
